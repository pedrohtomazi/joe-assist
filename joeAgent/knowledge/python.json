[
  "Nunca use eval.",
  "Prefira list comprehension em vez de for simples.",
  "Funções devem ser nomeadas em snake_case.",
  "Introduction\n1\n1.1\n1.2\n1.3\n1.4\n1.5\n1.6\n1.7\n1.8\n1.9\n1.10\n1.11\n1.12\n1.13\n1.14\n1.15\n1.16\n1.17\n1.18\n1.19\n1.20\n1.21\n1.22\n1.23\n1.24\n1.25\nTable of Contents\nIntroduction\nDedication\nPreface\nAbout Python\nInstallation\nFirst Steps\nBasics\nOperators and Expressions\nControl flow\nFunctions\nModules\nData Structures\nProblem Solving\nObject Oriented Programming\nInput and Output\nExceptions\nStandard Library\nMore\nWhat Next\nAppendix: FLOSS\nAppendix: About\nAppendix: Revision History\nAppendix: Translations\nAppendix: Translation How-to\nFeedback\nIntroduction\n2\nA Byte of Python\n\"A Byte of Python\" is a free book on programming using the Python language. It serves as a tutorial or guide to the\nPython language for a beginner audience. If all you know about computers is how to save text files, then this is the\nbook for you.\nFor Python version 3\nThis book will teach you to use Python version 3. There will also be guidance for you to adapt to the older and more\ncommon Python version 2 in the book.\nWho reads A Byte of Python?\nHere are what people are saying about the book:\nSomewhere around 2004 - 05 when I was convinced I wasn’t smart enough to be a programmer , I came\ncame across the original A Byte of #Python, and that changed my entire perspective on computing and life , I\nowe a lot to that book @swaroopch had written. -- Rahul on Jul 30, 2020\nThis is the book that got me into programming almost a decade ago. Thank you @swaroopch. You changed\nmy life. -- Stefan Froelich on Aug 2, 2019\nI am writing this email to thank you for the great help your book has done for me! It was a really good book\nthat I enjoyed thoroughly. As a 15 year old who has never done programming before, trying to learn Python\nonline was difficult and I couldn't understand anything. But I felt like your book gave was much easier to\nunderstand and eased me into the whole new world of programming. Thanks to you, I can now write a high\nlevel language with ease. I thought programming would be hard and boring, but with your book's help, I\nrealised how fun and interesting yet simple it can be! I would like to thank you again for your hard work on\nhelping out beginners like me. -- Prottyashita Tahiyat on Sep 17, 2019\nThis is the best beginner's tutorial I've ever seen! Thank you for your effort. -- Walt Michalik\nThe best thing i found was \"A Byte of Python\", which is simply a brilliant book for a beginner. It's well written,\nthe concepts are well explained with self evident examples. -- Joshua Robin\nExcellent gentle introduction to programming #Python for beginners -- Shan Rajasekaran\nstart to love python with every single page read -- Herbert Feutl\nperfect beginners guide for python, will give u key to unlock magical world of python -- Dilip\nI should be doing my actual \"work\" but just found \"A Byte of Python\". A great guide with great examples. --\nBiologist John\nRecently started reading a Byte of python. Awesome work. And that too for free. Highly recommended for\naspiring pythonistas. -- Mangesh\nA Byte of Python, written by Swaroop. (this is the book I'm currently reading). Probably the best to start with,\nand probably the best in the world for every newbie or even a more experienced user. -- Apostolos\nEnjoying Reading #ByteOfPython by @swaroopch best book ever -- Yuvraj Sharma\nA Byte of Python by @swaroopch is still the \"Best newbie guide to python\" -- Nickson Kaigi\nIntroduction\n3\nThank you so much for writing A Byte Of Python. I just started learning how to code two days ago and I'm\nalready building some simple games. Your guide has been a dream and I just wanted to let you know how\nvaluable it has been. -- Franklin\nI'm from Dayanandasagar College of Engineering (7th sem, CSE). Firstly i want to say that your book \"The\nbyte of python\" is too good a book for a beginner in python like me.The concepts are so well explained with\nsimple examples that helped me to easily learn python. Thank you so much. -- Madhura\nI am a 18 year old IT student studying at University in Ireland. I would like to express my gratitude to you for\nwriting your book \"A Byte of Python\", I already had knowledge of 3 programming langagues - C, Java and\nJavascript, and Python was by far the easiest langague I have ever learned, and that was mainly because\nyour book was fantastic and made learning python very simple and interesting. It is one of the best written\nand easy to follow programming books I have ever read. Congratulations and keep up the great work. -- Matt\nHi, I'm from Dominican Republic. My name is Pavel, recently I read your book A Byte of Python and I\nconsider it excellent!! :). I learnt much from all the examples. Your book is of great help for newbies like me...\n-- Pavel Simo\nI am a student from China, Now ,I have read you book A byte of Python, Oh it's beautiful. The book is very\nsimple but can help all the first learnners. You know I am interesting in Java and cloud computing many\ntimes, i have to coding programm for the server, so i think python is a good choice, finish your book, i think its\nnot only a good choice its must use the Python. My English is not very well, the email to you, i just wanna\nthank you! Best Wishes for you and your family. -- Roy Lau\nI recently finished reading Byte of Python, and I thought I really ought to thank you. I was very sad to reach\nthe final pages as I now have to go back to dull, tedious oreilly or etc. manuals for learning about python.\nAnyway, I really appreciate your book. Samuel Young\nDear Swaroop, I am taking a class from an instructor that has no interest in teaching. We are using Learning\nPython, second edition, by O'Reilly. It is not a text for beginner without any programming knowledge, and an\ninstructor that should be working in another field. Thank you very much for your book, without it I would be\nclueless about Python and programming. Thanks a million, you are able to break the message down to a\nlevel that beginners can understand and not everyone can. -- Joseph Duarte\nI love your book! It is the greatest Python tutorial ever, and a very useful reference. Brilliant, a true\nmasterpiece! Keep up the good work! -- Chris-André Sommerseth\nFirst of all, I want to say thanks to you for this great book. I think it is a good book for those who are looking\nfor a beginner's tutorial for Python. It is about two or there years ago, I think, when I first heard of this book.\nAt that time, I was unable to read books in English yet, so I got a chinese translation, which took me into the\ngate of Python programming. Recently, I reread this book. This time, of course, the english version. I couldn't\nbelieve that I can read the whole book without my dictionary at hand. Of course, it all dues to your effort to\nmake this book an easy-to-understand one. -- myd7349\nI'm just e-mailing you to thank you for writing Byte of Python online. I had been attempting Python for a few\nmonths prior to stumbling across your book, and although I made limited success with pyGame, I never\ncompleted a program. Thanks to your simplification of the categories, Python actually seems a reachable\ngoal. It seems like I have finally learned the foundations and I can continue into my real goal, game\ndevelopment. ... Once again, thanks VERY much for placing such a structured and helpful guide to basic\nprogramming on the web. It shoved me into and out of OOP with an understanding where two text books had\nfailed. -- Matt Gallivan\nIntroduction\n4\nI would like to thank you for your book A Byte of Python which i myself find the best way to learn python. I am\na 15 year old i live in egypt my name is Ahmed. Python was my second programming language i learn visual\nbasic 6 at school but didn't enjoy it, however i really enjoyed learning python. I made the addressbook\nprogram and i was sucessful. i will try to start make more programs and read python programs (if you could\ntell me source that would be helpful). I will also start on learning java and if you can tell me where to find a\ntutorial as good as yours for java that would help me a lot. Thanx. -- Ahmed Mohammed\nA wonderful resource for beginners wanting to learn more about Python is the 110-page PDF tutorial A Byte\nof Python by Swaroop C H. It is well-written, easy to follow, and may be the best introduction to Python\nprogramming available. -- Drew Ames\nYesterday I got through most of Byte of Python on my Nokia N800 and it's the easiest and most concise\nintroduction to Python I have yet encountered. Highly recommended as a starting point for learning Python. --\nJason Delport\nByte of Vim and Python by @swaroopch is by far the best works in technical writing to me. Excellent reads\n#FeelGoodFactor -- Surendran\n\"Byte of python\" best one by far man (in response to the question \"Can anyone suggest a good, inexpensive\nresource for learning the basics of Python? \") -- Justin LoveTrue\nThe Book Byte of python was very helpful ..Thanks bigtime :) Chinmay\nAlways been a fan of A Byte of Python - made for both new and experienced programmers. -- Patrick\nHarrington\nI started learning python few days ago from your book..thanks for such a nice book. it is so well written, you\nmade my life easy..so you found a new fan of yours..thats me :) tons of thanks. -- Gadadhari Bheem\nBefore I started to learn Python, I've acquired basic programming skills in Assembly, C, C++, C# and Java.\nThe very reason I wanted to learn Python is it's popular (people are talking about it) and powerful (reality).\nThis book written by Mr. Swaroop is a very good guide for both brand-new programmers and new python\nprogrammers. Took 10 half days to go through it. Great Help! -- Fang Biyi (PhD Candidate ECE, Michigan\nState University)\nThank you ever so much for this book!! This book cleared up many questions I had about certain aspects of\nPython such as object oriented programming. I do not feel like an expert at OO but I know this book helped\nme on a first step or two. I have now written several python programs that actually do real things for me as a\nsystem administrator. They are all procedural oriented but they are small by most peoples standards. Again,\nthanks for this book. Thank you for having it on the web. -- Bob\nI just want to thank you for writing the first book on programming I've ever really read. Python is now my first\nlanguage, and I can just imagine all the possibilities. So thank you for giving me the tools to create things I\nnever would have imagined I could do before. -- \"The Walrus\"\nI wanted to thank you for writing A Byte Of Python (2 & 3 Versions). It has been invaluable to my learning\nexperience in Python & Programming in general. Needless to say, I am a beginner in the programming world,\na couple of months of self study up to this point. I had been using youtube tutorials & some other online\ntutorials including other free books. I decided to dig into your book yesterday, & I've learned more on the first\nfew pages than any other book or tutorial. A few things I had been confused about, were cleared right up with\na GREAT example & explanation. Can't wait to read (and learn) more!! Thank you so much for not only\nwriting the book, but for putting it under the creative commons license (free). Thank goodness there are\nunselfish people like you out there to help & teach the rest of us. -- Chris\nIntroduction\n5\nI wrote you back in 2011 and I was just getting into Python and wanted to thank you for your tutorial \"A Byte\nof Python\". Without it, I would have fallen by the wayside. Since then I have gone on to program a number of\nfunctions in my organization with this language with yet more on the horizon. I would not call myself an\nadvanced programmer by any stretch but I notice the occasional request for assistance now from others\nsince I started using it. I discovered, while reading \"Byte\" why I had ceased studying C and C++ and it was\nbecause the book given to me started out with an example containing an augmented assignment. Of course,\nthere was no explanation for this arrangement of operators and I fell on my head trying to make sense of\nwhat was on the written page. As I recall it was a most frustrating exercise which I eventually abandoned.\nDoesn't mean C or C++ is impossible to learn, or even that I am stupid, but it does mean that the\ndocumentation I worked my way through did not define the symbols and words which is an essential part of\nany instruction. Just as computers will not be able to understand a computer word or computer symbol that is\noutside the syntax for the language being used, a student new to any field will not grasp his subject if he\nencounters words or symbols for which there are no definitions. You get a \"blue screen\" as it were in either\ncase. The solution is simple, though: find the word or symbol and get the proper definition or symbol and lo\nand behold,the computer or student can proceed. Your book was so well put together that I found very little in\nit I couldn't grasp. So, thank you. I encourage you to continue to include full definitions of terms. The\ndocumentation with Python is good, once you know, (the examples are its strength from what I see) but in\nmany cases it seems that you have to know in order to understand the documentation which to my mind is\nnot what should be. Third party tutorials express the need for clarification of the documentation and their\nsuccess largely depends on the words that are used to describe the terminology. I have recommended your\nbook to many others. Some in Australia, some in the Caribbean and yet others in the US. It fills a niche no\nothers do. I hope you are doing well and wish you all the success in the future. -- Nick\nhey, this is ankush(19). I was facing a great difficulty to start with python. I tried a lot of books but all were\nbulkier and not target oriented; and then i found this lovely one, which made me love python in no time.\nThanks a lot for this \"beautiful piece of book\". -- Ankush\nI would like to thank you for your excellent guide on Python. I am a molecular biologist (with little\nprogramming background) and for my work I need to handle big datasets of DNA sequences and to analyse\nmicroscope images. For both things, programming in python has been useful, if not essential to complete and\npublish a 6-years project. That such a guide is freely available is a clear sign that the forces of evil are not yet\nruling the world! :) -- Luca\nSince this is going to be the first language you learn, you should use A Byte of Python. It really gives a proper\nintroduction into programming in Python and it is paced well enough for the average beginner. The most\nimportant thing from then on will be actually starting to practice making your own little programs. -- \"\n{Unregistered}\"\nJust to say a loud and happy thank you very much for publishing \"A Byte of Python\" and \"A Byte of Vim\".\nThose books were very useful to me four or five years ago when I starting learning programming. Right now\nI'm developing a project that was a dream for a long, long time and just want to say thank you. Keep walking.\nYou are a source of motivation. All the best. -- Jocimar\nFinished reading A byte of Python in 3 days. It is thoroughly interesting. Not a single page was boring. I want\nto understand the Orca screen reader code. Your book has hopefully equipped me for it. -- Dattatray\nHi, 'A byte of python' is really a good reading for python beginners. So, again, NICE WORK! i'm a 4 years\nexperienced Java&C developer from China. Recently, i want to do some work on zim-wiki note project which\nuses pygtk to implement. i read your book in 6 days, and i can read and write python code examples now. thx\nfor your contribution. plz keep your enthusiasm to make this world better, this is just a little encourage from\nChina. -- Lee\nIntroduction\n6\nI am Isen from Taiwan, who is a graduating PhD student in Electrical Engineering Department of National\nTaiwan University. I would like to thank you for your great book. I think it is not only just easy to read but also\ncomprehensive and complete for a new comer of Python. The reason I read your book is that I am starting to\nwork on the GNU Radio framework. Your book let me catch most of important core ideas and skill of Python\nwith a minimum time. I also saw that you do not mind that readers send you a thank note in your book. So I\nreally like your book and appreciate it. Thanks. -- Isen I-Chun Chao\nThe book is even used by NASA! It is used in their Jet Propulsion Laboratory with their Deep Space Network\nproject.\nAcademic Courses\nThis book is/was being used as instructional material in various educational institutions:\n'Principles of Programming Languages' course at Vrije Universiteit, Amsterdam\n'Basic Concepts of Computing' course at University of California, Davis\n'Programming With Python' course at Harvard University\n'Introduction to Programming' course at University of Leeds\n'Introduction to Application Programming' course at Boston University\n'Information Technology Skills for Meteorology' course at University of Oklahoma\n'Geoprocessing' course at Michigan State University\n'Multi Agent Semantic Web Systems' course at the University of Edinburgh\n'Introduction to Computer Science and Programming' at MIT OpenCourseWare\n'Basic programming at the Faculty of Social Sciences, University of Ljubljana, Slovenia' -- Aleš Žiberna says \"I\n(and my predecessor) have been using your book as the main literature for this course\"\n'Introduction to programming', Department of Information Sciences, University of Zadar, Croatia -- Krešimir\nZauder says \"I would like to inform you that A Byte of Python is a mandatory read at my course\"\nLicense\nThis book is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\nThis means:\nYou are free to Share i.e. to copy, distribute and transmit this book\nYou are free to Remix i.e. to make changes to this book (especially translations)\nYou are free to use it for commercial purposes\nPlease note:\nPlease do not sell electronic or printed copies of the book unless you have clearly and prominently mentioned\nin the description that these copies are not from the original author of this book.\nAttribution must be shown in the introductory description and front page of the document by linking back to\nhttps://python.swaroopch.com and clearly indicating that the original text can be fetched from this location.\nAll the code/scripts provided in this book is licensed under the 3-clause BSD License unless otherwise noted.\nRead Now\nYou can read it online at https://python.swaroopch.com\nBuy The Book\nIntroduction\n7\nA printed hardcopy of the book can be purchased at https://swaroopch.com/buybook/ for your offline reading\npleasure, and to support the continued development and improvement of this book.\nDownload\nVisit https://github.com/swaroopch/byte-of-python/releases/latest to download a PDF file (best for desktop reading)\nor an EPUB file (best for devices such as mobile, tablet, ebook readers).\nVisit https://github.com/swaroopch/byte-of-python for the raw content (for suggesting corrections, changes,\ntranslating, etc.)\nRead the book in your native language\nIf you are interested in reading or contributing translations of this book to other human languages, please see\nTranslations.\nIntroduction\n8\nDedication\nTo Kalyan Varma and many other seniors at PESIT who introduced us to GNU/Linux and the world of open source.\nTo the memory of Atul Chitnis, a friend and guide who shall be missed greatly.\nTo the pioneers who made the Internet happen. This book was first written in 2003. It still remains popular, thanks to\nthe nature of sharing knowledge on the Internet as envisioned by the pioneers.\nIntroduction\n9\nPreface\nPython is probably one of the few programming languages which is both simple and powerful. This is good for\nbeginners as well as for experts, and more importantly, is fun to program with. This book aims to help you learn this\nwonderful language and show how to get things done quickly and painlessly - in effect 'The Anti-venom to your\nprogramming problems'.\nWho This Book Is For\nThis book serves as a guide or tutorial to the Python programming language. It is mainly targeted at newbies. It is\nuseful for experienced programmers as well.\nThe aim is that if all you know about computers is how to save text files, then you can learn Python from this book.\nIf you have previous programming experience, then you can also learn Python from this book.\nIf you do have previous programming experience, you will be interested in the differences between Python and your\nfavorite programming language - I have highlighted many such differences. A little warning though, Python is soon\ngoing to become your favorite programming language!\nOfficial Website\nThe official website of the book is https://python.swaroopch.com where you can read the whole book online,\ndownload the latest versions of the book, buy a printed hard copy and also send me feedback.\nSomething To Think About\nThere are two ways of constructing a software design: one way is to make it so simple that there are\nobviously no deficiencies; the other is to make it so complicated that there are no obvious deficiencies. -- C.\nA. R. Hoare\nSuccess in life is a matter not so much of talent and opportunity as of concentration and perseverance. -- C.\nW. Wendte\nIntroduction\n10\nAbout Python\nPython is one of those rare languages which can claim to be both simple and powerful. You will find yourself\npleasantly surprised to see how easy it is to concentrate on the solution to the problem rather than the syntax and\nstructure of the language you are programming in.\nThe official introduction to Python is:\nPython is an easy to learn, powerful programming language. It has efficient high-level data structures and a\nsimple but effective approach to object-oriented programming. Python's elegant syntax and dynamic typing,\ntogether with its interpreted nature, make it an ideal language for scripting and rapid application development\nin many areas on most platforms.\nI will discuss most of these features in more detail in the next section.\nStory behind the name\nGuido van Rossum, the creator of the Python language, named the language after the BBC show \"Monty Python's\nFlying Circus\". He doesn't particularly like snakes that kill animals for food by winding their long bodies around them\nand crushing them.\nFeatures of Python\nSimple\nPython is a simple and minimalistic language. Reading a good Python program feels almost like reading English,\nalthough very strict English! This pseudo-code nature of Python is one of its greatest strengths. It allows you to\nconcentrate on the solution to the problem rather than the language itself.\nEasy to Learn\nAs you will see, Python is extremely easy to get started with. Python has an extraordinarily simple syntax, as\nalready mentioned.\nFree and Open Source\nPython is an example of a FLOSS (Free/Libre and Open Source Software). In simple terms, you can freely\ndistribute copies of this software, read its source code, make changes to it, and use pieces of it in new free\nprograms. FLOSS is based on the concept of a community which shares knowledge. This is one of the reasons why\nPython is so good - it has been created and is constantly improved by a community who just want to see a better\nPython.\nHigh-level Language\nWhen you write programs in Python, you never need to bother about the low-level details such as managing the\nmemory used by your program, etc.\nPortable\nIntroduction\n11\nDue to its open-source nature, Python has been ported to (i.e. changed to make it work on) many platforms. All\nyour Python programs can work on any of these platforms without requiring any changes at all if you are careful\nenough to avoid any system-dependent features.\nYou can use Python on GNU/Linux, Windows, FreeBSD, Macintosh, Solaris, OS/2, Amiga, AROS, AS/400, BeOS,\nOS/390, z/OS, Palm OS, QNX, VMS, Psion, Acorn RISC OS, VxWorks, PlayStation, Sharp Zaurus, Windows CE\nand PocketPC!\nYou can even use a platform like Kivy to create games for your computer and for iPhone, iPad, and Android.\nInterpreted\nThis requires a bit of explanation.\nA program written in a compiled language like C or C++ is converted from the source language i.e. C or C++ into a\nlanguage that is spoken by your computer (binary code i.e. 0s and 1s) using a compiler with various flags and\noptions. When you run the program, the linker/loader software copies the program from hard disk to memory and\nstarts running it.\nPython, on the other hand, does not need compilation to binary. You just run the program directly from the source\ncode. Internally, Python converts the source code into an intermediate form called bytecodes and then translates\nthis into the native language of your computer and then runs it. All this, actually, makes using Python much easier\nsince you don't have to worry about compiling the program, making sure that the proper libraries are linked and\nloaded, etc. This also makes your Python programs much more portable, since you can just copy your Python\nprogram onto another computer and it just works!\nObject Oriented\nPython supports procedure-oriented programming as well as object-oriented programming (OOP). In procedure-\noriented languages, the program is built around procedures or functions which are nothing but reusable pieces of\nprograms. In object-oriented languages, the program is built around objects which combine data and functionality.\nPython has a very powerful but simplistic way of doing OOP, especially when compared to big languages like C++\nor Java.\nExtensible\nIf you need a critical piece of code to run very fast or want to have some piece of algorithm not to be open, you can\ncode that part of your program in C or C++ and then use it from your Python program.\nEmbeddable\nYou can embed Python within your C/C++ programs to give scripting capabilities for your program's users.\nExtensive Libraries\nThe Python Standard Library is huge indeed. It can help you do various things involving regular\nexpressions,documentation generation, unit testing, threading, databases, web browsers, CGI, FTP, email, XML,\nXML-RPC, HTML, WAV files, cryptography, GUI (graphical user interfaces), and other system-dependent stuff.\nRemember, all this is always available wherever Python is installed. This is called the Batteries Included philosophy\nof Python.\nBesides the standard library, there are various other high-quality libraries which you can find at the Python Package\nIndex.\nIntroduction\n12\nSummary\nPython is indeed an exciting and powerful language. It has the right combination of performance and features that\nmake writing programs in Python both fun and easy.\nPython 3 versus 2\nYou can ignore this section if you're not interested in the difference between \"Python version 2\" and \"Python version\n3\". But please do be aware of which version you are using. This book is written for Python version 3.\nRemember that once you have properly understood and learn to use one version, you can easily learn the\ndifferences and use the other one. The hard part is learning programming and understanding the basics of Python\nlanguage itself. That is our goal in this book, and once you have achieved that goal, you can easily use Python 2 or\nPython 3 depending on your situation.\nFor details on differences between Python 2 and Python 3, see:\nThe future of Python 2\nPorting Python 2 Code to Python 3\nWriting code that runs under both Python2 and 3\nSupporting Python 3: An in-depth guide\nWhat Programmers Say\nYou may find it interesting to read what great hackers like Eric S. Raymond (ESR) have to say about Python:\nEric S. Raymond is the author of \"The Cathedral and the Bazaar\" and is also the person who coined the term\nOpen Source. He says that Python has become his favorite programming language. This article was the real\ninspiration for my first brush with Python.\nBruce Eckel is the author of the famous 'Thinking in Java' and 'Thinking in C++' books. He says that no\nlanguage has made him more productive than Python. He says that Python is perhaps the only language that\nfocuses on making things easier for the programmer. Read the complete interview for more details.\nPeter Norvig is a well-known Lisp author and Director of Search Quality at Google (thanks to Guido van\nRossum for pointing that out). He says that writing Python is like writing in pseudocode. He says that Python\nhas always been an integral part of Google. You can actually verify this statement by looking at the Google\nJobs page which lists Python knowledge as a requirement for software engineers.\nIntroduction\n13\nInstallation\nWhen we refer to \"Python 3\" in this book, we will be referring to any version of Python equal to or greater than\nversion Python 3.6.0.\nInstallation on Windows\nVisit https://www.python.org/downloads/ and download the latest version. At the time of this writing, it was Python\n3.5.1 The installation is just like any other Windows-based software.\nNote that if your Windows version is pre-Vista, you should download Python 3.4 only as later versions require\nnewer versions of Windows.\nCAUTION: Make sure you check option  Add Python 3.5 to PATH .\nTo change install location, click on  Customize installation , then  Next  and enter  C:\\python35  (or another\nappropriate location) as the install location.\nIf you didnᓼt check the  Add Python 3.5 PATH  option earlier, check  Add Python to environment variables . This does\nthe same thing as  Add Python 3.5 to PATH  on the first install screen.\nYou can choose to install Launcher for all users or not, it does not matter much. Launcher is used to switch between\ndifferent versions of Python installed.\nIf your path was not set correctly (by checking the  Add Python 3.5 Path  or  Add Python to environment variables \noptions), then follow the steps in the next section ( DOS Prompt ) to fix it. Otherwise, go to the  Running Python prompt\non Windows  section in this document.\nNOTE: For people who already know programming, if you are familiar with Docker, check out Python in Docker and\nDocker on Windows.\nDOS Prompt\nIf you want to be able to use Python from the Windows command line i.e. the DOS prompt, then you need to set the\nPATH variable appropriately.\nFor Windows 2000, XP, 2003 , click on  Control Panel  ->  System  ->  Advanced  ->  Environment Variables . Click on\nthe variable named  PATH  in the System Variables section, then select  Edit  and add  ;C:\\Python35  (please verify\nthat this folder exists, it will be different for newer versions of Python) to the end of what is already there. Of course,\nuse the appropriate directory name.\nFor older versions of Windows, open the file  C:\\AUTOEXEC.BAT  and add the line  PATH=%PATH%;C:\\Python35  and\nrestart the system. For Windows NT, use the  AUTOEXEC.NT  file.\nFor Windows Vista:\nClick Start and choose  Control Panel \nClick System, on the right you'll see \"View basic information about your computer\"\nOn the left is a list of tasks, the last of which is  Advanced system settings . Click that.\nThe  Advanced  tab of the  System Properties  dialog box is shown. Click the  Environment Variables  button on\nthe bottom right.\nIn the lower box titled  System Variables  scroll down to Path and click the  Edit  button.\nChange your path as need be.\nRestart your system. Vista didn't pick up the system path environment variable change until I restarted.\nIntroduction\n14\nFor Windows 7 and 8:\nRight click on Computer from your desktop and select  Properties  or click  Start  and choose  Control Panel \n->  System and Security  ->  System . Click on  Advanced system settings  on the left and then click on the\n Advanced  tab. At the bottom click on  Environment Variables  and under  System variables , look for the  PATH \nvariable, select and then press  Edit .\nGo to the end of the line under Variable value and append  ;C:\\Python35  (please verify that this folder exists, it\nwill be different for newer versions of Python) to the end of what is already there. Of course, use the\nappropriate folder name.\nIf the value was  %SystemRoot%\\system32;  It will now become  %SystemRoot%\\system32;C:\\Python36 \nClick  OK  and you are done. No restart is required, however you may have to close and reopen the command\nline.\nFor Windows 10:\nWindows Start Menu >  Settings  >  About  >  System Info  (this is all the way over to the right) >  Advanced System\nSettings  >  Environment Variables  (this is towards the bottom) > (then highlight  Path  variable and click  Edit ) >\n New  > (type in whatever your python location is. For example,  C:\\Python35\\ )\nRunning Python prompt on Windows\nFor Windows users, you can run the interpreter in the command line if you have set the  PATH  variable\nappropriately.\nTo open the terminal in Windows, click the start button and click  Run . In the dialog box, type  cmd  and press\n [enter]  key.\nThen, type  python  and ensure there are no errors.\nInstallation on Mac OS X\nFor Mac OS X users, use Homebrew:  brew install python3 .\nTo verify, open the terminal by pressing  [Command + Space]  keys (to open Spotlight search), type  Terminal  and\npress  [enter]  key. Now, run  python3  and ensure there are no errors.\nInstallation on GNU/Linux\nFor GNU/Linux users, use your distribution's package manager to install Python 3, e.g. on Debian & Ubuntu:  sudo\napt-get update && sudo apt-get install python3 .\nTo verify, open the terminal by opening the  Terminal  application or by pressing  Alt + F2  and entering  gnome-\nterminal . If that doesn't work, please refer the documentation of your particular GNU/Linux distribution. Now, run\n python3  and ensure there are no errors.\nYou can see the version of Python on the screen by running:\n$ python3 -V \nPython 3.6.0 \nNOTE:  $  is the prompt of the shell. It will be different for you depending on the settings of the operating system on\nyour computer, hence I will indicate the prompt by just the  $  symbol.\nIntroduction\n15\nCAUTION: Output may be different on your computer, depending on the version of Python software installed on\nyour computer.\nSummary\nFrom now on, we will assume that you have Python installed on your system.\nNext, we will write our first Python program.\nIntroduction\n16\nFirst Steps\nWe will now see how to run a traditional 'Hello World' program in Python. This will teach you how to write, save and\nrun Python programs.\nThere are two ways of using Python to run your program - using the interactive interpreter prompt or using a source\nfile. We will now see how to use both of these methods.\nUsing The Interpreter Prompt\nOpen the terminal in your operating system (as discussed previously in the Installation chapter) and then open the\nPython prompt by typing  python3  and pressing  [enter]  key.\nOnce you have started Python, you should see  >>>  where you can start typing stuff. This is called the Python\ninterpreter prompt.\nAt the Python interpreter prompt, type:\nprint(\"Hello World\") \nfollowed by the  [enter]  key. You should see the words  Hello World  printed to the screen.\nHere is an example of what you should be seeing, when using a Mac OS X computer. The details about the Python\nsoftware will differ based on your computer, but the part from the prompt (i.e. from  >>>  onwards) should be the\nsame regardless of the operating system.\n$ python3 \nPython 3.6.0 (default, Jan 12 2017, 11:26:36) \n[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.38)] on darwin \nType \"help\", \"copyright\", \"credits\" or \"license\" for more information. \n>>> print(\"Hello World\") \nHello World \nNotice that Python gives you the output of the line immediately! What you just entered is a single Python statement.\nWe use  print  to (unsurprisingly) print any value that you supply to it. Here, we are supplying the text  Hello World \nand this is promptly printed to the screen.\nHow to Quit the Interpreter Prompt\nIf you are using a GNU/Linux or OS X shell, you can exit the interpreter prompt by pressing  [ctrl + d]  or entering\n exit()  (note: remember to include the parentheses,  () ) followed by the  [enter]  key.\nIf you are using the Windows command prompt, press  [ctrl + z]  followed by the  [enter]  key.\nChoosing An Editor\nWe cannot type out our program at the interpreter prompt every time we want to run something, so we have to save\nthem in files and can run our programs any number of times.\nTo create our Python source files, we need an editor software where you can type and save. A good programmer's\neditor will make your life easier in writing the source files. Hence, the choice of an editor is crucial indeed. You have\nto choose an editor as you would choose a car you would buy. A good editor will help you write Python programs\nIntroduction\n17\neasily, making your journey more comfortable and helps you reach your destination (achieve your goal) in a much\nfaster and safer way.\nOne of the very basic requirements is syntax highlighting where all the different parts of your Python program are\ncolorized so that you can see your program and visualize its running.\nIf you have no idea where to start, I would recommend using PyCharm Educational Edition software which is\navailable on Windows, Mac OS X and GNU/Linux. Details in the next section.\nIf you are using Windows, do not use Notepad - it is a bad choice because it does not do syntax highlighting and\nalso importantly it does not support indentation of the text which is very important in our case as we will see later.\nGood editors will automatically do this.\nIf you are an experienced programmer, then you must be already using Vim or Emacs. Needless to say, these are\ntwo of the most powerful editors and you will benefit from using them to write your Python programs. I personally\nuse both for most of my programs, and have even written an entire book on Vim.\nIn case you are willing to take the time to learn Vim or Emacs, then I highly recommend that you do learn to use\neither of them as it will be very useful for you in the long run. However, as I mentioned before, beginners can start\nwith PyCharm and focus the learning on Python rather than the editor at this moment.\nTo reiterate, please choose a proper editor - it can make writing Python programs more fun and easy.\nIf you are interested in a detailed discussion on this topic, check out Finding the Perfect Python Code Editor.\nPyCharm\nPyCharm Educational Edition is a free editor which you can use for writing Python programs.\nWhen you open PyCharm, you'll see this, click on  Create New Project :\nIntroduction\n18\nSelect  Pure Python :",
  "[Imagem na página 18]\nTexto OCR: PyCharm Educational Edition",
  "Welcome to PyCharm Educational Edition",
  "Recent Projects Quick Start",
  "Introduction to Python\n— Create New Project\nOpen...\nNo Project Open Yet\nCheck out from Version Control",
  "Configure",
  "Docs and How-Tos",
  "PyCharm Educational Edition 1.0 Build 139.280. Check for updates now.\nLegenda IA: the welcome button in the welcome button menu\nIntroduction\n19\nChange  untitled  to  helloworld  as the location of the project, you should see details similar to this:",
  "[Imagem na página 19]\nTexto OCR: PyCharm Educational Edition",
  "Recent Projects Create New Project",
  "Pure Python",
  "”",
  "F Educational\nE",
  "No Project Open Yet",
  "PyCharm Educational Edition 1.0 Build 139.280. Check for updates now.\nLegenda IA: the welcome page for the welcome page in the welcome page\nIntroduction\n20\nClick the  Create  button.\nRight-click on the  helloworld  in the sidebar and select  New  ->  Python File :",
  "[Imagem na página 20]\nTexto OCR: PyCharm Educational Edition",
  "Recent Projects Pure Python",
  "Location: /Users /swaroop/PycharmProjects /untitled",
  "Interpreter: & 2.5.6 at /System/Library/Frameworks /Python.fra... 2) %e",
  "PyCharm Educational Edition 1.0 Build 139.280. Check for updates now.\nLegenda IA: welcome to the welcome button in the welcome button\nIntroduction\n21\nYou will be asked to type the name, type  hello :\nYou can now see a file opened for you:",
  "[Imagem na página 21]\nTexto OCR: () 87 0 helloworld - [-/PycharmProjects /helloworld]\n[4 helloworld >\n3) Project\n[3 helloworld (- /PycharmProiects /helloworld)\nlh External Libraries New",
  "ject",
  "2l = File\n[) Directory\nCut EJ Python Package",
  ") Copy\nCopy Path & Python File",
  "Copy Reference\nl Paste",
  "T 1: Pro",
  "Find Usages\nFind in Path...\nReplace in Path...\nInspect Code...",
  "PyCharm Educational Edition",
  "Refactor\nClean Python Compiled Files\nNavigate to the next answer placeholder with º <&",
  "Show Image Thumbnails f\n* Navigate between answer placeholders with “4€,and º 6.",
  "+ Create 'Unittests in helloworld\"... ; ;\n& * Navigate between tasks with º, and º.",
  "D Run 'Unittests in helloworld' PNFIO\ne Reset current task file with QX",
  "H Debug 'Unittests in helloworld' NOFI\ne Check task with XD",
  "Local History\n&D Synchronize 'helloworld' e Get hint for the answer placeholder with 97\ne To see your progress open the 'Course Description' panel",
  ">",
  "Reveal in Finder",
  "Compare Directory wi\nMark Directory As",
  "& Create Gist...",
  "& Python Console\nCreates a Python file from the specified template\nLegenda IA: the new menu menu in the mac os",
  "[Imagem na página 21]\nTexto OCR: [4 helloworld >",
  "1 1: Pro.",
  "3) Project v\n[3 helloworld (- /PycharmProjects /helloworld)",
  "lh External Libraries",
  "& Python Console",
  "e Navinate to the naxt ancwer placeholder with A",
  "New Python file '\nT T FFFFFFAAHaceholders with 1, and É.\nName:  hello and”.",
  "Kind: & Python file",
  "mthe 'Course Description' panel\nLegenda IA: the new mac mailbox\nIntroduction\n22\nDelete the lines that are already present, and now type the following:\nprint(\"hello world\") \nNow right-click on what you typed (without selecting the text), and click on  Run 'hello' .\nYou should now see the output (what it prints) of your program:",
  "[Imagem na página 22]\nTexto OCR: oeoo",
  "| ) hello.py - helloworld - [--/PycharmProjects/helloworld]",
  "[3 helloworld ) |& hello.py »\nB) Project v\nEJ helloworld (-/PycharmProjects/helloworld)",
  "é hello.py\nWlh External Libraries",
  "”\n\"\nF\no\n2\n[\n=\nÊ",
  "1& hello.py x\n1D : author -\n2",
  "'swaroop'",
  "1:1",
  "LF ? UTF-8?",
  "& Python Console\nLegenda IA: the screen with the new file in the background",
  "[Imagem na página 22]\nTexto OCR: | ) hello.py - helloworld - [--/PycharmProjects/helloworld]",
  "oeoo\n[3 helloworld ) |& hello.py »\nB) Project v & hello.py x",
  "[J helloworld (- /PycharmProjects/helloworld) 1 ) nrint \"halla warld\"\n& hello.py Copy Reference\nlh External Libraries l Paste\nPaste from History...\nPaste Simple\nColumn Selection Mode",
  "1) 1: Project",
  "Find Usages\nRefactor",
  "Folding",
  "Go To",
  "& Save 'hello'",
  "Run 'hello' “OFIO",
  "% Debug 'hello' “NFI\nLocal History >",
  "Execute Line in Console\nCompare with Clipboard\nFile Encoding",
  "& Python Console\n1:1 LF3$ UTF-B8 3\nLegenda IA: the screen with the new file option\nIntroduction\n23\nPhew! That was quite a few steps to get started, but henceforth, every time we ask you to create a new file,\nremember to just right-click on  helloworld  on the left ->  New  ->  Python File  and continue the same steps to type\nand run as shown above.\nYou can find more information about PyCharm in the PyCharm Quickstart page.\nVim\n1. Install Vim\nMac OS X users should install  macvim  package via HomeBrew\nWindows users should download the \"self-installing executable\" from Vim website\nGNU/Linux users should get Vim from their distribution's software repositories, e.g. Debian and Ubuntu\nusers can install the  vim  package.\n2. Install jedi-vim plugin for autocompletion.\n3. Install corresponding  jedi  python package :  pip install -U jedi \nEmacs\n1. Install Emacs 24+.\nMac OS X users should get Emacs from http://emacsformacosx.com\nWindows users should get Emacs from http://ftp.gnu.org/gnu/emacs/windows/\nGNU/Linux users should get Emacs from their distribution's software repositories, e.g. Debian and Ubuntu\nusers can install the  emacs24  package.\n2. Install ELPY\nUsing A Source File",
  "[Imagem na página 23]\nTexto OCR: eoeoo | ) hello.py - helloworld - [--/PycharmProjects/helloworld]",
  "[3 helloworld ) |& hello.py »",
  "B) Project v & hello.py x",
  "EJ helloworld (-/PycharmProjects/helloworld) 1 ) brint \"hello world\"",
  "Run hello\n/System/Library/Frameworks/Python. framework/Versions/2.5/bin/python2.5 /Users/swa/PycharmProjects/helloworld/hello.py",
  "hello world",
  "Process finished with exit code O",
  "& Python Console — D 4: Run\n5:1 LF3$ UTF-8 2\nLegenda IA: a screenshote view of a web page\nIntroduction\n24\nNow let's get back to programming. There is a tradition that whenever you learn a new programming language, the\nfirst program that you write and run is the 'Hello World' program - all it does is just say 'Hello World' when you run it.\nAs Simon Cozens  says, it is the \"traditional incantation to the programming gods to help you learn the language\nbetter.\"\nStart your choice of editor, enter the following program and save it as  hello.py .\nIf you are using PyCharm, we have already discussed how to run from a source file.\nFor other editors, open a new file  hello.py  and type this:\nprint(\"hello world\") \nWhere should you save the file? To any folder for which you know the location of the folder. If you don't understand\nwhat that means, create a new folder and use that location to save and run all your Python programs:\n /tmp/py  on Mac OS X\n /tmp/py  on GNU/Linux\n C:\\py  on Windows\nTo create the above folder (for the operating system you are using), use the  mkdir  command in the terminal, for\nexample,  mkdir /tmp/py .\nIMPORTANT: Always ensure that you give it the file extension of  .py , for example,  foo.py .\nTo run your Python program:\n1. Open a terminal window (see the previous Installation chapter on how to do that)\n2. Change directory to where you saved the file, for example,  cd /tmp/py \n3. Run the program by entering the command  python hello.py . The output is as shown below.\n$ python hello.py \nhello world \n1\nIntroduction\n25\nIf you got the output as shown above, congratulations! - you have successfully run your first Python program. You\nhave successfully crossed the hardest part of learning programming, which is, getting started with your first\nprogram!\nIn case you got an error, please type the above program exactly as shown above and run the program again. Note\nthat Python is case-sensitive i.e.  print  is not the same as  Print  - note the lowercase  p  in the former and the\nuppercase  P  in the latter. Also, ensure there are no spaces or tabs before the first character in each line - we will\nsee why this is important later.\nHow It Works\nA Python program is composed of statements. In our first program, we have only one statement. In this statement,\nwe call the  print  statement to which we supply the text \"hello world\".\nGetting Help\nIf you need quick information about any function or statement in Python, then you can use the built-in  help \nfunctionality. This is very useful especially when using the interpreter prompt. For example, run  help('len')  - this\ndisplays the help for the  len  function which is used to count number of items.\nTIP: Press  q  to exit the help.\nSimilarly, you can obtain information about almost anything in Python. Use  help()  to learn more about using\n help  itself!\nIn case you need to get help for operators like  return , then you need to put those inside quotes such as\n help('return')  so that Python doesn't get confused on what we're trying to do.\nSummary",
  "[Imagem na página 25]\nTexto OCR: [20:33:32] [/tmp/py]\n$ python hello.py\nhello world",
  "[Zª: 33:36] [/tmp/py]\n$\nLegenda IA: a black screen with a red button and a green button\nIntroduction\n26\nYou should now be able to write, save and run Python programs at ease.\nNow that you are a Python user, let's learn some more Python concepts.\n. the author of the amazing 'Beginning Perl' book ↩\n1\nIntroduction\n27\nBasics\nJust printing  hello world  is not enough, is it? You want to do more than that - you want to take some input,\nmanipulate it and get something out of it. We can achieve this in Python using constants and variables, and we'll\nlearn some other concepts as well in this chapter.\nComments\nComments are any text to the right of the  #  symbol and is mainly useful as notes for the reader of the program.\nFor example:\nprint('hello world') # Note that print is a function \nor:\n# Note that print is a function \nprint('hello world') \nUse as many useful comments as you can in your program to:\nexplain assumptions\nexplain important decisions\nexplain important details\nexplain problems you're trying to solve\nexplain problems you're trying to overcome in your program, etc.\nCode tells you how, comments should tell you why.\nThis is useful for readers of your program so that they can easily understand what the program is doing.\nRemember, that person can be yourself after six months!\nLiteral Constants\nAn example of a literal constant is a number like  5 ,  1.23 , or a string like  'This is a string'  or  \"It's a\nstring!\" .\nIt is called a literal because it is literal - you use its value literally. The number  2  always represents itself and\nnothing else - it is a constant because its value cannot be changed. Hence, all these are referred to as literal\nconstants.\nNumbers\nNumbers are mainly of two types - integers and floats.\nAn example of an integer is  2  which is just a whole number.\nExamples of floating point numbers (or floats for short) are  3.23  and  52.3E-4 . The  E  notation indicates powers\nof 10. In this case,  52.3E-4  means  52.3 * 10^-4 .\nIntroduction\n28\nNote for Experienced Programmers\nThere is no separate  long  type. The  int  type can be an integer of any size.\nStrings\nA string is a sequence of characters. Strings are basically just a bunch of words.\nYou will be using strings in almost every Python program that you write, so pay attention to the following part.\nSingle Quote\nYou can specify strings using single quotes such as  'Quote me on this' .\nAll white space i.e. spaces and tabs, within the quotes, are preserved as-is.\nDouble Quotes\nStrings in double quotes work exactly the same way as strings in single quotes. An example is  \"What's your\nname?\" .\nTriple Quotes\nYou can specify multi-line strings using triple quotes - ( \"\"\"  or  ''' ). You can use single quotes and double quotes\nfreely within the triple quotes. An example is:\n'''This is a multi-line string. This is the first line. \nThis is the second line. \n\"What's your name?,\" I asked. \nHe said \"Bond, James Bond.\" \n''' \nStrings Are Immutable\nThis means that once you have created a string, you cannot change it. Although this might seem like a bad thing, it\nreally isn't. We will see why this is not a limitation in the various programs that we see later on.\nNote for C/C++ Programmers\nThere is no separate  char  data type in Python. There is no real need for it and I am sure you won't miss it.\nNote for Perl/PHP Programmers\nRemember that single-quoted strings and double-quoted strings are the same - they do not differ in any way.\nThe format method\nSometimes we may want to construct strings from other information. This is where the  format()  method is useful.\nSave the following lines as a file  str_format.py :\nage = 20 \nname = 'Swaroop' \n \nprint('{0} was {1} years old when he wrote this book'.format(name, age)) \nprint('Why is {0} playing with that python?'.format(name)) \nIntroduction\n29\nOutput:\n$ python str_format.py \nSwaroop was 20 years old when he wrote this book \nWhy is Swaroop playing with that python? \nHow It Works\nA string can use certain specifications and subsequently, the  format  method can be called to substitute those\nspecifications with corresponding arguments to the  format  method.\nObserve the first usage where we use  {0}  and this corresponds to the variable  name  which is the first argument\nto the format method. Similarly, the second specification is  {1}  corresponding to  age  which is the second\nargument to the format method. Note that Python starts counting from 0 which means that first position is at index 0,\nsecond position is at index 1, and so on.\nNotice that we could have achieved the same using string concatenation:\nname + ' is ' + str(age) + ' years old' \nbut that is much uglier and more error-prone. Second, the conversion to string would be done automatically by the\n format  method instead of the explicit conversion to strings needed in this case. Third, when using the  format \nmethod, we can change the message without having to deal with the variables used and vice-versa.\nAlso note that the numbers are optional, so you could have also written as:\nage = 20 \nname = 'Swaroop' \n \nprint('{} was {} years old when he wrote this book'.format(name, age)) \nprint('Why is {} playing with that python?'.format(name)) \nwhich will give the same exact output as the previous program.\nWe can also name the parameters:\nage = 20 \nname = 'Swaroop' \n \nprint('{name} was {age} years old when he wrote this book'.format(name=name, age=age)) \nprint('Why is {name} playing with that python?'.format(name=name)) \nwhich will give the same exact output as the previous program.\nPython 3.6 introduced a shorter way to do named parameters, called \"f-strings\":\nage = 20 \nname = 'Swaroop' \n \nprint(f'{name} was {age} years old when he wrote this book')  # notice the 'f' before the string \nprint(f'Why is {name} playing with that python?')  # notice the 'f' before the string \nwhich will give the same exact output as the previous program.\nWhat Python does in the  format  method is that it substitutes each argument value into the place of the\nspecification. There can be more detailed specifications such as:\nIntroduction\n30\n# decimal (.) precision of 3 for float '0.333' \nprint('{0:.3f}'.format(1.0/3)) \n# fill with underscores (_) with the text centered \n# (^) to 11 width '___hello___' \nprint('{0:_^11}'.format('hello')) \n# keyword-based 'Swaroop wrote A Byte of Python' \nprint('{name} wrote {book}'.format(name='Swaroop', book='A Byte of Python')) \nOutput:\n0.333 \n___hello___ \nSwaroop wrote A Byte of Python \nSince we are discussing formatting, note that  print  always ends with an invisible \"new line\" character ( \\n ) so\nthat repeated calls to  print  will all print on a separate line each. To prevent this newline character from being\nprinted, you can specify that it should  end  with a blank:\nprint('a', end='') \nprint('b', end='') \nOutput is:\nab \nOr you can  end  with a space:\nprint('a', end=' ') \nprint('b', end=' ') \nprint('c') \nOutput is:\na b c \nEscape Sequences\nSuppose, you want to have a string which contains a single quote ( ' ), how will you specify this string? For\nexample, the string is  \"What's your name?\" . You cannot specify  'What's your name?'  because Python will be\nconfused as to where the string starts and ends. So, you will have to specify that this single quote does not indicate\nthe end of the string. This can be done with the help of what is called an escape sequence. You specify the single\nquote as  \\'  : notice the backslash. Now, you can specify the string as  'What\\'s your name?' .\nAnother way of specifying this specific string would be  \"What's your name?\"  i.e. using double quotes. Similarly, you\nhave to use an escape sequence for using a double quote itself in a double quoted string. Also, you have to indicate\nthe backslash itself using the escape sequence  \\\\ .\nWhat if you wanted to specify a two-line string? One way is to use a triple-quoted string as shown previously or you\ncan use an escape sequence for the newline character -  \\n  to indicate the start of a new line. An example is:\n'This is the first line\\nThis is the second line' \nAnother useful escape sequence to know is the tab:  \\t . There are many more escape sequences but I have\nmentioned only the most useful ones here.\nIntroduction\n31\nOne thing to note is that in a string, a single backslash at the end of the line indicates that the string is continued in\nthe next line, but no newline is added. For example:\n\"This is the first sentence. \\ \nThis is the second sentence.\" \nis equivalent to\n\"This is the first sentence. This is the second sentence.\" \nRaw String\nIf you need to specify some strings where no special processing such as escape sequences are handled, then what\nyou need is to specify a raw string by prefixing  r  or  R  to the string. An example is:\nr\"Newlines are indicated by \\n\" \nNote for Regular Expression Users\nAlways use raw strings when dealing with regular expressions. Otherwise, a lot of backwhacking may be\nrequired. For example, backreferences can be referred to as  '\\\\1'  or  r'\\1' .\nVariable\nUsing just literal constants can soon become boring - we need some way of storing any information and manipulate\nthem as well. This is where variables come into the picture. Variables are exactly what the name implies - their\nvalue can vary, i.e., you can store anything using a variable. Variables are just parts of your computer's memory\nwhere you store some information. Unlike literal constants, you need some method of accessing these variables\nand hence you give them names.\nIdentifier Naming\nVariables are examples of identifiers. Identifiers are names given to identify something. There are some rules you\nhave to follow for naming identifiers:\nThe first character of the identifier must be a letter of the alphabet (uppercase ASCII or lowercase ASCII or\nUnicode character) or an underscore ( _ ).\nThe rest of the identifier name can consist of letters (uppercase ASCII or lowercase ASCII or Unicode\ncharacter), underscores ( _ ) or digits (0-9).\nIdentifier names are case-sensitive. For example,  myname  and  myName  are not the same. Note the lowercase\n n  in the former and the uppercase  N  in the latter.\nExamples of valid identifier names are  i ,  name_2_3 . Examples of invalid identifier names are  2things ,  this\nis spaced out ,  my-name  and  >a1b2_c3 .\nData Types\nVariables can hold values of different types called data types. The basic types are numbers and strings, which we\nhave already discussed. In later chapters, we will see how to create our own types using classes.\nIntroduction\n32\nObject\nRemember, Python refers to anything used in a program as an object. This is meant in the generic sense. Instead\nof saying \"the something\"', we say \"the object\".\nNote for Object Oriented Programming users:\nPython is strongly object-oriented in the sense that everything is an object including numbers, strings and\nfunctions.\nWe will now see how to use variables along with literal constants. Save the following example and run the program.\nHow to write Python programs\nHenceforth, the standard procedure to save and run a Python program is as follows:\nFor PyCharm\n1. Open PyCharm.\n2. Create new file with the filename mentioned.\n3. Type the program code given in the example.\n4. Right-click and run the current file.\nNOTE: Whenever you have to provide command line arguments, click on  Run  ->  Edit Configurations  and type\nthe arguments in the  Script parameters:  section and click the  OK  button:\nFor other editors\n1. Open your editor of choice.\n2. Type the program code given in the example.\n3. Save it as a file with the filename mentioned.\n4. Run the interpreter with the command  python program.py  to run the program.",
  "[Imagem na página 32]\nTexto OCR: [3 helloworld > & hello.py\n5) Project & hello.py",
  "[3 helloworld name = raw input(\"What is your name? \")\n& hello.py print \"That is\", len(name), \"characters long.\"",
  "Run/Debug Configurations",
  "Single instance only\n& Python\nhello Logs\n/ Defaults\nScript: /Users /swaroop/PycharmProjects /helloworld/hello.py",
  "Script parameters: Wwe are arguments",
  "y Environment",
  "Environment variables: — PYTHONUNBUFFERED=1\nPython interpreter: Project Default (Python 2.7.5 (/System/Library/Frameworks /Python.framewo!\nInterpreter options:",
  "Working directory: /Users /swa/PycharmProjects /helloworld",
  "M Add content roots to PYTHONPATH\nM/ Add source roots to PYTHONPATH",
  "Debug hello l",
  "%& — Debugger Console » Before launch",
  "/System/Library/ | =file /Users/swa/Pychail\npydev debugger:",
  "Connected to pyd\nWhat is your nan\nThat is 4 charac",
  "Process finished\n+",
  "Show this page",
  "9:1 LF3? UTF-B8?\nLegenda IA: the settings dial in the settings dial dial\nIntroduction\n33\nExample: Using Variables And Literal Constants\nType and run the following program:\n# Filename : var.py \ni = 5 \nprint(i) \ni = i + 1 \nprint(i) \n \ns = '''This is a multi-line string. \nThis is the second line.''' \nprint(s) \nOutput:\n5 \n6 \nThis is a multi-line string. \nThis is the second line. \nHow It Works\nHere's how this program works. First, we assign the literal constant value  5  to the variable  i  using the\nassignment operator ( = ). This line is called a statement because it states that something should be done and in\nthis case, we connect the variable name  i  to the value  5 . Next, we print the value of  i  using the  print \nstatement which, unsurprisingly, just prints the value of the variable to the screen.\nThen we add  1  to the value stored in  i  and store it back. We then print it and expectedly, we get the value  6 .\nSimilarly, we assign the literal string to the variable  s  and then print it.\nNote for static language programmers\nVariables are used by just assigning them a value. No declaration or data type definition is needed/used.\nLogical And Physical Line\nA physical line is what you see when you write the program. A logical line is what Python sees as a single\nstatement. Python implicitly assumes that each physical line corresponds to a logical line.\nAn example of a logical line is a statement like  print('hello world')  - if this was on a line by itself (as you see it in\nan editor), then this also corresponds to a physical line.\nImplicitly, Python encourages the use of a single statement per line which makes code more readable.\nIf you want to specify more than one logical line on a single physical line, then you have to explicitly specify this\nusing a semicolon ( ; ) which indicates the end of a logical line/statement. For example:\ni = 5 \nprint(i) \nis effectively same as\ni = 5; \nprint(i); \nIntroduction\n34\nwhich is also same as\ni = 5; print(i); \nand same as\ni = 5; print(i) \nHowever, I strongly recommend that you stick to writing a maximum of a single logical line on each single physical\nline. The idea is that you should never use the semicolon. In fact, I have never used or even seen a semicolon in a\nPython program.\nThere is one kind of situation where this concept is really useful: if you have a long line of code, you can break it\ninto multiple physical lines by using the backslash. This is referred to as explicit line joining:\ns = 'This is a string. \\ \nThis continues the string.' \nprint(s) \nOutput:\nThis is a string. This continues the string. \nSimilarly,\ni = \\ \n5 \nis the same as\ni = 5 \nSometimes, there is an implicit assumption where you don't need to use a backslash. This is the case where the\nlogical line has a starting parentheses, starting square brackets or a starting curly braces but not an ending one.\nThis is called implicit line joining. You can see this in action when we write programs using list in later chapters.\nIndentation\nWhitespace is important in Python. Actually, whitespace at the beginning of the line is important. This is called\nindentation. Leading whitespace (spaces and tabs) at the beginning of the logical line is used to determine the\nindentation level of the logical line, which in turn is used to determine the grouping of statements.\nThis means that statements which go together must have the same indentation. Each such set of statements is\ncalled a block. We will see examples of how blocks are important in later chapters.\nOne thing you should remember is that wrong indentation can give rise to errors. For example:\ni = 5 \n# Error below! Notice a single space at the start of the line \n print('Value is', i) \nprint('I repeat, the value is', i) \nWhen you run this, you get the following error:\nIntroduction\n35\n  File \"whitespace.py\", line 3 \n    print('Value is', i) \n    ^ \nIndentationError: unexpected indent \nNotice that there is a single space at the beginning of the second line. The error indicated by Python tells us that the\nsyntax of the program is invalid i.e. the program was not properly written. What this means to you is that you cannot\narbitrarily start new blocks of statements (except for the default main block which you have been using all along, of\ncourse). Cases where you can use new blocks will be detailed in later chapters such as the control flow.\nHow to indent\nUse four spaces for indentation. This is the official Python language recommendation. Good editors will\nautomatically do this for you. Make sure you use a consistent number of spaces for indentation, otherwise\nyour program will not run or will have unexpected behavior.\nNote to static language programmers\nPython will always use indentation for blocks and will never use braces. Run  from __future__ import braces \nto learn more.\nSummary\nNow that we have gone through many nitty-gritty details, we can move on to more interesting stuff such as control\nflow statements. Be sure to become comfortable with what you have read in this chapter.\nIntroduction\n36\nOperators and Expressions\nMost statements (logical lines) that you write will contain expressions. A simple example of an expression is  2 +\n3 . An expression can be broken down into operators and operands.\nOperators are functionality that do something and can be represented by symbols such as  +  or by special\nkeywords. Operators require some data to operate on and such data is called operands. In this case,  2  and  3 \nare the operands.\nOperators\nWe will briefly take a look at the operators and their usage.\nNote that you can evaluate the expressions given in the examples using the interpreter interactively. For example,\nto test the expression  2 + 3 , use the interactive Python interpreter prompt:\n>>> 2 + 3 \n5 \n>>> 3 * 5 \n15 \n>>> \nHere is a quick overview of the available operators:\n +  (plus)\nAdds two objects\n 3 + 5  gives  8 .  'a' + 'b'  gives  'ab' .\n -  (minus)\nGives the subtraction of one number from the other; if the first operand is absent it is assumed to be zero.\n -5.2  gives a negative number and  50 - 24  gives  26 .\n *  (multiply)\nGives the multiplication of the two numbers or returns the string repeated that many times.\n 2 * 3  gives  6 .  'la' * 3  gives  'lalala' .\n **  (power)\nReturns x to the power of y\n 3 ** 4  gives  81  (i.e.  3 * 3 * 3 * 3 )\n /  (divide)\nDivide x by y\n 13 / 3  gives  4.333333333333333 \n //  (divide and floor)\nDivide x by y and round the answer down to the nearest integer value. Note that if one of the values is a\nfloat, you'll get back a float.\n 13 // 3  gives  4 \n -13 // 3  gives  -5 \n 9//1.81  gives  4.0 \n %  (modulo)\nReturns the remainder of the division\nIntroduction\n37\n 13 % 3  gives  1 .  -25.5 % 2.25  gives  1.5 .\n <<  (left shift)\nShifts the bits of the number to the left by the number of bits specified. (Each number is represented in\nmemory by bits or binary digits i.e. 0 and 1)\n 2 << 2  gives  8 .  2  is represented by  10  in bits.\nLeft shifting by 2 bits gives  1000  which represents the decimal  8 .\n >>  (right shift)\nShifts the bits of the number to the right by the number of bits specified.\n 11 >> 1  gives  5 .\n 11  is represented in bits by  1011  which when right shifted by 1 bit gives  101 which is the decimal  5 .\n &  (bit-wise AND)\nBit-wise AND of the numbers: if both bits are  1 , the result is  1 . Otherwise, it's  0 .\n 5 & 3  gives  1  ( 0101 & 0011  gives  0001 )\n |  (bit-wise OR)\nBitwise OR of the numbers: if both bits are  0 , the result is  0 . Otherwise, it's  1 .\n 5 | 3  gives  7  ( 0101 | 0011  gives  0111 )\n ^  (bit-wise XOR)\nBitwise XOR of the numbers: if both bits ( 1 or 0 ) are the same, the result is  0 . Otherwise, it's  1 .\n 5 ^ 3  gives  6  ( O101 ^ 0011  gives  0110 )\n ~  (bit-wise invert)\nThe bit-wise inversion of x is -(x+1)\n ~5  gives  -6 . More details at http://stackoverflow.com/a/11810203\n <  (less than)\nReturns whether x is less than y. All comparison operators return  True  or  False . Note the capitalization\nof these names.\n 5 < 3  gives  False  and  3 < 5  gives  True .\nComparisons can be chained arbitrarily:  3 < 5 < 7  gives  True .\n >  (greater than)\nReturns whether x is greater than y\n 5 > 3  returns  True . If both operands are numbers, they are first converted to a common type.\nOtherwise, it always returns  False .\n <=  (less than or equal to)\nReturns whether x is less than or equal to y\n x = 3; y = 6; x <= y  returns  True \n >=  (greater than or equal to)\nReturns whether x is greater than or equal to y\n x = 4; y = 3; x >= 3  returns  True \n ==  (equal to)\nCompares if the objects are equal\n x = 2; y = 2; x == y  returns  True \n x = 'str'; y = 'stR'; x == y  returns  False \n x = 'str'; y = 'str'; x == y  returns  True \n !=  (not equal to)\nCompares if the objects are not equal\n x = 2; y = 3; x != y  returns  True \nIntroduction\n38\n not  (boolean NOT)\nIf x is  True , it returns  False . If x is  False , it returns  True .\n x = True; not x  returns  False .\n and  (boolean AND)\n x and y  returns  False  if x is  False , else it returns evaluation of y\n x = False; y = True; x and y  returns  False  since x is False. In this case, Python will not evaluate y\nsince it knows that the left hand side of the 'and' expression is  False  which implies that the whole\nexpression will be  False  irrespective of the other values. This is called short-circuit evaluation.\n or  (boolean OR)\nIf x is  True , it returns True, else it returns evaluation of y\n x = True; y = False; x or y  returns  True . Short-circuit evaluation applies here as well.\nShortcut for math operation and assignment\nIt is common to run a math operation on a variable and then assign the result of the operation back to the variable,\nhence there is a shortcut for such expressions:\na = 2 \na = a * 3 \ncan be written as:\na = 2 \na *= 3 \nNotice that  var = var operation expression  becomes  var operation= expression .\nEvaluation Order\nIf you had an expression such as  2 + 3 * 4 , is the addition done first or the multiplication? Our high school maths\ntells us that the multiplication should be done first. This means that the multiplication operator has higher\nprecedence than the addition operator.\nThe following table gives the precedence table for Python, from the lowest precedence (least binding) to the highest\nprecedence (most binding). This means that in a given expression, Python will first evaluate the operators and\nexpressions lower in the table before the ones listed higher in the table.\nThe following table, taken from the Python reference manual, is provided for the sake of completeness. It is far\nbetter to use parentheses to group operators and operands appropriately in order to explicitly specify the\nprecedence. This makes the program more readable. See Changing the Order of Evaluation below for details.\n lambda  : Lambda Expression\n if - else  : Conditional expression\n or  : Boolean OR\n and  : Boolean AND\n not x  : Boolean NOT\n in, not in, is, is not, <, <=, >, >=, !=, ==  : Comparisons, including membership tests and identity tests\n |  : Bitwise OR\n ^  : Bitwise XOR\n &  : Bitwise AND\nIntroduction\n39\n <<, >>  : Shifts\n +, -  : Addition and subtraction\n *, /, //, %  : Multiplication, Division, Floor Division and Remainder\n +x, -x, ~x  : Positive, Negative, bitwise NOT\n **  : Exponentiation\n x[index], x[index:index], x(arguments...), x.attribute  : Subscription, slicing, call, attribute reference\n (expressions...), [expressions...], {key: value...}, {expressions...}  : Binding or tuple display, list display,\ndictionary display, set display\nThe operators which we have not already come across will be explained in later chapters.\nOperators with the same precedence are listed in the same row in the above table. For example,  +  and  -  have\nthe same precedence.\nChanging the Order Of Evaluation\nTo make the expressions more readable, we can use parentheses. For example,  2 + (3 * 4)  is definitely easier to\nunderstand than  2 + 3 * 4  which requires knowledge of the operator precedences. As with everything else, the\nparentheses should be used reasonably (do not overdo it) and should not be redundant, as in  (2 + (3 * 4)) .\nThere is an additional advantage to using parentheses - it helps us to change the order of evaluation. For example,\nif you want addition to be evaluated before multiplication in an expression, then you can write something like  (2 +\n3) * 4 .\nAssociativity\nOperators are usually associated from left to right. This means that operators with the same precedence are\nevaluated in a left to right manner. For example,  2 + 3 + 4  is evaluated as  (2 + 3) + 4 .\nExpressions\nExample (save as  expression.py ):\nlength = 5 \nbreadth = 2 \n \narea = length * breadth \nprint('Area is', area) \nprint('Perimeter is', 2 * (length + breadth)) \nOutput:\n$ python expression.py \nArea is 10 \nPerimeter is 14 \nHow It Works\nThe length and breadth of the rectangle are stored in variables by the same name. We use these to calculate the\narea and perimeter of the rectangle with the help of expressions. We store the result of the expression  length *\nbreadth  in the variable  area  and then print it using the  print  function. In the second case, we directly use the\nvalue of the expression  2 * (length + breadth)  in the print function.\nIntroduction\n40\nAlso, notice how Python pretty-prints the output. Even though we have not specified a space between  'Area is' \nand the variable  area , Python puts it for us so that we get a clean nice output and the program is much more\nreadable this way (since we don't need to worry about spacing in the strings we use for output). This is an example\nof how Python makes life easy for the programmer.\nSummary\nWe have seen how to use operators, operands and expressions - these are the basic building blocks of any\nprogram. Next, we will see how to make use of these in our programs using statements.\nIntroduction\n41\nControl Flow\nIn the programs we have seen till now, there has always been a series of statements faithfully executed by Python\nin exact top-down order. What if you wanted to change the flow of how it works? For example, you want the\nprogram to take some decisions and do different things depending on different situations, such as printing 'Good\nMorning' or 'Good Evening' depending on the time of the day?\nAs you might have guessed, this is achieved using control flow statements. There are three control flow statements\nin Python -  if ,  for  and  while .\nThe  if  statement\nThe  if  statement is used to check a condition: if the condition is true, we run a block of statements (called the if-\nblock), else we process another block of statements (called the else-block). The else clause is optional.\nExample (save as  if.py ):\nnumber = 23 \nguess = int(input('Enter an integer : ')) \n \nif guess == number: \n    # New block starts here \n    print('Congratulations, you guessed it.') \n    print('(but you do not win any prizes!)') \n    # New block ends here \nelif guess < number: \n    # Another block \n    print('No, it is a little higher than that') \n    # You can do whatever you want in a block ... \nelse: \n    print('No, it is a little lower than that') \n    # you must have guessed > number to reach here \n \nprint('Done') \n# This last statement is always executed, \n# after the if statement is executed. \nOutput:\n$ python if.py \nEnter an integer : 50 \nNo, it is a little lower than that \nDone \n \n$ python if.py \nEnter an integer : 22 \nNo, it is a little higher than that \nDone \n \n$ python if.py \nEnter an integer : 23 \nCongratulations, you guessed it. \n(but you do not win any prizes!) \nDone \nHow It Works\nIntroduction\n42\nIn this program, we take guesses from the user and check if it is the number that we have. We set the variable\n number  to any integer we want, say  23 . Then, we take the user's guess using the  input()  function. Functions\nare just reusable pieces of programs. We'll read more about them in the next chapter.\nWe supply a string to the built-in  input  function which prints it to the screen and waits for input from the user.\nOnce we enter something and press kbd:[enter] key, the  input()  function returns what we entered, as a string. We\nthen convert this string to an integer using  int  and then store it in the variable  guess . Actually, the  int  is a\nclass but all you need to know right now is that you can use it to convert a string to an integer (assuming the string\ncontains a valid integer in the text).\nNext, we compare the guess of the user with the number we have chosen. If they are equal, we print a success\nmessage. Notice that we use indentation levels to tell Python which statements belong to which block. This is why\nindentation is so important in Python. I hope you are sticking to the \"consistent indentation\" rule. Are you?\nNotice how the  if  statement contains a colon at the end - we are indicating to Python that a block of statements\nfollows.\nThen, we check if the guess is less than the number, and if so, we inform the user that they must guess a little\nhigher than that. What we have used here is the  elif  clause which actually combines two related  if else-if\nelse  statements into one combined  if-elif-else  statement. This makes the program easier and reduces the\namount of indentation required.\nThe  elif  and  else  statements must also have a colon at the end of the logical line followed by their\ncorresponding block of statements (with proper indentation, of course)\nYou can have another  if  statement inside the if-block of an  if  statement and so on - this is called a nested  if \nstatement.\nRemember that the  elif  and  else  parts are optional. A minimal valid  if  statement is:\nif True: \n    print('Yes, it is true') \nAfter Python has finished executing the complete  if  statement along with the associated  elif  and  else \nclauses, it moves on to the next statement in the block containing the  if  statement. In this case, it is the main\nblock (where execution of the program starts), and the next statement is the  print('Done')  statement. After this,\nPython sees the ends of the program and simply finishes up.\nEven though this is a very simple program, I have been pointing out a lot of things that you should notice. All these\nare pretty straightforward (and surprisingly simple for those of you from C/C++ backgrounds). You will need to\nbecome aware of all these things initially, but after some practice you will become comfortable with them, and it will\nall feel 'natural' to you.\nNote for C/C++ Programmers\nThere is no  switch  statement in Python. You can use an  if..elif..else  statement to do the same thing\n(and in some cases, use a dictionary to do it quickly)\nThe while Statement\nThe  while  statement allows you to repeatedly execute a block of statements as long as a condition is true. A\n while  statement is an example of what is called a looping statement. A  while  statement can have an optional\n else  clause.\nExample (save as  while.py ):\nIntroduction\n43\nnumber = 23 \nrunning = True \n \nwhile running: \n    guess = int(input('Enter an integer : ')) \n \n    if guess == number: \n        print('Congratulations, you guessed it.') \n        # this causes the while loop to stop \n        running = False \n    elif guess < number: \n        print('No, it is a little higher than that.') \n    else: \n        print('No, it is a little lower than that.') \nelse: \n    print('The while loop is over.') \n    # Do anything else you want to do here \n \nprint('Done') \nOutput:\n$ python while.py \nEnter an integer : 50 \nNo, it is a little lower than that. \nEnter an integer : 22 \nNo, it is a little higher than that. \nEnter an integer : 23 \nCongratulations, you guessed it. \nThe while loop is over. \nDone \nHow It Works\nIn this program, we are still playing the guessing game, but the advantage is that the user is allowed to keep\nguessing until he guesses correctly - there is no need to repeatedly run the program for each guess, as we have\ndone in the previous section. This aptly demonstrates the use of the  while  statement.\nWe move the  input  and  if  statements to inside the  while  loop and set the variable  running  to  True  before\nthe while loop. First, we check if the variable  running  is  True  and then proceed to execute the corresponding\nwhile-block. After this block is executed, the condition is again checked which in this case is the  running  variable.\nIf it is true, we execute the while-block again, else we continue to execute the optional else-block and then continue\nto the next statement.\nThe  else  block is executed when the  while  loop condition becomes  False  - this may even be the first time that\nthe condition is checked. If there is an  else  clause for a  while  loop, it is always executed unless you break out of\nthe loop with a  break  statement.\nThe  True  and  False  are called Boolean types and you can consider them to be equivalent to the value  1  and\n 0  respectively.\nNote for C/C++ Programmers\nRemember that you can have an  else  clause for the  while  loop.\nThe  for  loop\nIntroduction\n44\nThe  for..in  statement is another looping statement which iterates over a sequence of objects i.e. go through\neach item in a sequence. We will see more about sequences in detail in later chapters. What you need to know\nright now is that a sequence is just an ordered collection of items.\nExample (save as  for.py ):\nfor i in range(1, 5): \n    print(i) \nelse: \n    print('The for loop is over') \nOutput:\n$ python for.py \n1 \n2 \n3 \n4 \nThe for loop is over \nHow It Works\nIn this program, we are printing a sequence of numbers. We generate this sequence of numbers using the built-in\n range  function.\nWhat we do here is supply it two numbers and  range  returns a sequence of numbers starting from the first number\nand up to the second number. For example,  range(1,5)  gives the sequence  [1, 2, 3, 4] . By default,  range \ntakes a step count of 1. If we supply a third number to  range , then that becomes the step count. For example,\n range(1,5,2)  gives  [1,3] . Remember that the range extends up to the second number i.e. it does not include the\nsecond number.\nNote that  range()  generates only one number at a time, if you want the full list of numbers, call  list()  on the\n range() , for example,  list(range(5))  will result in  [0, 1, 2, 3, 4] . Lists are explained in the data structures\nchapter.\nThe  for  loop then iterates over this range -  for i in range(1,5)  is equivalent to  for i in [1, 2, 3, 4]  which is\nlike assigning each number (or object) in the sequence to i, one at a time, and then executing the block of\nstatements for each value of  i . In this case, we just print the value in the block of statements.\nRemember that the  else  part is optional. When included, it is always executed once after the  for  loop is over\nunless a break statement is encountered.\nRemember that the  for..in  loop works for any sequence. Here, we have a list of numbers generated by the built-\nin  range  function, but in general we can use any kind of sequence of any kind of objects! We will explore this idea\nin detail in later chapters.\nNote for C/C++/Java/C# Programmers\nThe Python  for  loop is radically different from the C/C++  for  loop. C# programmers will note that the\n for  loop in Python is similar to the  foreach  loop in C#. Java programmers will note that the same is similar\nto  for (int i : IntArray)  in Java 1.5.\nIn C/C++, if you want to write  for (int i = 0; i < 5; i++) , then in Python you write just  for i in\nrange(0,5) . As you can see, the  for  loop is simpler, more expressive and less error prone in Python.\nThe break Statement\nIntroduction\n45\nThe  break  statement is used to break out of a loop statement i.e. stop the execution of a looping statement, even\nif the loop condition has not become  False  or the sequence of items has not been completely iterated over.\nAn important note is that if you break out of a  for  or  while  loop, any corresponding loop  else  block is not\nexecuted.\nExample (save as  break.py ):\nwhile True: \n    s = input('Enter something : ') \n    if s == 'quit': \n        break \n    print('Length of the string is', len(s)) \nprint('Done') \nOutput:\n$ python break.py \nEnter something : Programming is fun \nLength of the string is 18 \nEnter something : When the work is done \nLength of the string is 21 \nEnter something : if you wanna make your work also fun: \nLength of the string is 37 \nEnter something : use Python! \nLength of the string is 11 \nEnter something : quit \nDone \nHow It Works\nIn this program, we repeatedly take the user's input and print the length of each input each time. We are providing a\nspecial condition to stop the program by checking if the user input is  'quit' . We stop the program by breaking out\nof the loop and reach the end of the program.\nThe length of the input string can be found out using the built-in  len  function.\nRemember that the  break  statement can be used with the  for  loop as well.\nSwaroop's Poetic Python\nThe input I have used here is a mini poem I have written:\nProgramming is fun \nWhen the work is done \nif you wanna make your work also fun: \n    use Python! \nThe  continue  Statement\nThe  continue  statement is used to tell Python to skip the rest of the statements in the current loop block and to\ncontinue to the next iteration of the loop.\nExample (save as  continue.py ):\nIntroduction\n46\nwhile True: \n    s = input('Enter something : ') \n    if s == 'quit': \n        break \n    if len(s) < 3: \n        print('Too small') \n        continue \n    print('Input is of sufficient length') \n    # Do other kinds of processing here... \nOutput:\n$ python continue.py \nEnter something : a \nToo small \nEnter something : 12 \nToo small \nEnter something : abc \nInput is of sufficient length \nEnter something : quit \nHow It Works\nIn this program, we accept input from the user, but we process the input string only if it is at least 3 characters long.\nSo, we use the built-in  len  function to get the length and if the length is less than 3, we skip the rest of the\nstatements in the block by using the  continue  statement. Otherwise, the rest of the statements in the loop are\nexecuted, doing any kind of processing we want to do here.\nNote that the  continue  statement works with the  for  loop as well.\nSummary\nWe have seen how to use the three control flow statements -  if ,  while  and  for  along with their associated\n break  and  continue  statements. These are some of the most commonly used parts of Python and hence,\nbecoming comfortable with them is essential.\nNext, we will see how to create and use functions.\nIntroduction\n47\nFunctions\nFunctions are reusable pieces of programs. They allow you to give a name to a block of statements, allowing you to\nrun that block using the specified name anywhere in your program and any number of times. This is known as\ncalling the function. We have already used many built-in functions such as  len  and  range .\nThe function concept is probably the most important building block of any non-trivial software (in any programming\nlanguage), so we will explore various aspects of functions in this chapter.\nFunctions are defined using the  def  keyword. After this keyword comes an identifier name for the function,\nfollowed by a pair of parentheses which may enclose some names of variables, and by the final colon that ends the\nline. Next follows the block of statements that are part of this function. An example will show that this is actually very\nsimple:\nExample (save as  function1.py ):\ndef say_hello(): \n    # block belonging to the function \n    print('hello world') \n# End of function \n \nsay_hello()  # call the function \nsay_hello()  # call the function again \nOutput:\n$ python function1.py \nhello world \nhello world \nHow It Works\nWe define a function called  say_hello  using the syntax as explained above. This function takes no parameters and\nhence there are no variables declared in the parentheses. Parameters to functions are just input to the function so\nthat we can pass in different values to it and get back corresponding results.\nNotice that we can call the same function twice which means we do not have to write the same code again.\nFunction Parameters\nA function can take parameters, which are values you supply to the function so that the function can do something\nutilising those values. These parameters are just like variables except that the values of these variables are defined\nwhen we call the function and are already assigned values when the function runs.\nParameters are specified within the pair of parentheses in the function definition, separated by commas. When we\ncall the function, we supply the values in the same way. Note the terminology used - the names given in the function\ndefinition are called parameters whereas the values you supply in the function call are called arguments.\nExample (save as  function_param.py ):\nIntroduction\n48\ndef print_max(a, b): \n    if a > b: \n        print(a, 'is maximum') \n    elif a == b: \n        print(a, 'is equal to', b) \n    else: \n        print(b, 'is maximum') \n \n# directly pass literal values \nprint_max(3, 4) \n \nx = 5 \ny = 7 \n \n# pass variables as arguments \nprint_max(x, y) \nOutput:\n$ python function_param.py \n4 is maximum \n7 is maximum \nHow It Works\nHere, we define a function called  print_max  that uses two parameters called  a  and  b . We find out the greater\nnumber using a simple  if..else  statement and then print the bigger number.\nThe first time we call the function  print_max , we directly supply the numbers as arguments. In the second case, we\ncall the function with variables as arguments.  print_max(x, y)  causes the value of argument  x  to be assigned to\nparameter  a  and the value of argument  y  to be assigned to parameter  b . The  print_max  function works the\nsame way in both cases.\nLocal Variables\nWhen you declare variables inside a function definition, they are not related in any way to other variables with the\nsame names used outside the function - i.e. variable names are local to the function. This is called the scope of the\nvariable. All variables have the scope of the block they are declared in starting from the point of definition of the\nname.\nExample (save as  function_local.py ):\nx = 50 \n \n \ndef func(x): \n    print('x is', x) \n    x = 2 \n    print('Changed local x to', x) \n \n \nfunc(x) \nprint('x is still', x) \nOutput:\nIntroduction\n49\n$ python function_local.py \nx is 50 \nChanged local x to 2 \nx is still 50 \nHow It Works\nThe first time that we print the value of the name x with the first line in the function's body, Python uses the value of\nthe parameter declared in the main block, above the function definition.\nNext, we assign the value  2  to  x . The name  x  is local to our function. So, when we change the value of  x  in\nthe function, the  x  defined in the main block remains unaffected.\nWith the last  print  statement, we display the value of  x  as defined in the main block, thereby confirming that it is\nactually unaffected by the local assignment within the previously called function.\nThe  global  statement\nIf you want to assign a value to a name defined at the top level of the program (i.e. not inside any kind of scope\nsuch as functions or classes), then you have to tell Python that the name is not local, but it is global. We do this\nusing the  global  statement. It is impossible to assign a value to a variable defined outside a function without the\n global  statement.\nYou can use the values of such variables defined outside the function (assuming there is no variable with the same\nname within the function). However, this is not encouraged and should be avoided since it becomes unclear to the\nreader of the program as to where that variable's definition is. Using the  global  statement makes it amply clear\nthat the variable is defined in an outermost block.\nExample (save as  function_global.py ):\nx = 50 \n \n \ndef func(): \n    global x \n \n    print('x is', x) \n    x = 2 \n    print('Changed global x to', x) \n \n \nfunc() \nprint('Value of x is', x) \nOutput:\n$ python function_global.py \nx is 50 \nChanged global x to 2 \nValue of x is 2 \nHow It Works\nThe  global  statement is used to declare that  x  is a global variable - hence, when we assign a value to  x  inside\nthe function, that change is reflected when we use the value of  x  in the main block.\nYou can specify more than one global variable using the same  global  statement e.g.  global x, y, z .\nIntroduction\n50\nDefault Argument Values\nFor some functions, you may want to make some parameters optional and use default values in case the user does\nnot want to provide values for them. This is done with the help of default argument values. You can specify default\nargument values for parameters by appending to the parameter name in the function definition the assignment\noperator ( = ) followed by the default value.\nNote that the default argument value should be a constant. More precisely, the default argument value should be\nimmutable - this is explained in detail in later chapters. For now, just remember this.\nExample (save as  function_default.py ):\ndef say(message, times=1):\n    print(message * times) \n \nsay('Hello') \nsay('World', 5) \nOutput:\n$ python function_default.py \nHello \nWorldWorldWorldWorldWorld \nHow It Works\nThe function named  say  is used to print a string as many times as specified. If we don't supply a value, then by\ndefault, the string is printed just once. We achieve this by specifying a default argument value of  1  to the\nparameter  times .\nIn the first usage of  say , we supply only the string and it prints the string once. In the second usage of  say , we\nsupply both the string and an argument  5  stating that we want to say the string message 5 times.\nCAUTION\nOnly those parameters which are at the end of the parameter list can be given default argument values i.e.\nyou cannot have a parameter with a default argument value preceding a parameter without a default\nargument value in the function's parameter list.\nThis is because the values are assigned to the parameters by position. For example, def func(a, b=5)  is\nvalid, but  def func(a=5, b)  is not valid.\nKeyword Arguments\nIf you have some functions with many parameters and you want to specify only some of them, then you can give\nvalues for such parameters by naming them - this is called keyword arguments - we use the name (keyword)\ninstead of the position (which we have been using all along) to specify the arguments to the function.\nThere are two advantages - one, using the function is easier since we do not need to worry about the order of the\narguments. Two, we can give values to only those parameters to which we want to, provided that the other\nparameters have default argument values.\nExample (save as  function_keyword.py ):\nIntroduction\n51\ndef func(a, b=5, c=10): \n    print('a is', a, 'and b is', b, 'and c is', c) \n \nfunc(3, 7) \nfunc(25, c=24) \nfunc(c=50, a=100) \nOutput:\n$ python function_keyword.py \na is 3 and b is 7 and c is 10 \na is 25 and b is 5 and c is 24 \na is 100 and b is 5 and c is 50 \nHow It Works\nThe function named  func  has one parameter without a default argument value, followed by two parameters with\ndefault argument values.\nIn the first usage,  func(3, 7) , the parameter  a  gets the value  3 , the parameter  b  gets the value  7  and  c \ngets the default value of  10 .\nIn the second usage  func(25, c=24) , the variable  a  gets the value of 25 due to the position of the argument.\nThen, the parameter  c  gets the value of  24  due to naming i.e. keyword arguments. The variable  b  gets the\ndefault value of  5 .\nIn the third usage  func(c=50, a=100) , we use keyword arguments for all specified values. Notice that we are\nspecifying the value for parameter  c  before that for  a  even though  a  is defined before  c  in the function\ndefinition.\nVarArgs parameters\nSometimes you might want to define a function that can take any number of parameters, i.e. variable number of\narguments, this can be achieved by using the stars (save as  function_varargs.py ):\ndef total(a=5, *numbers, **phonebook): \n    print('a', a) \n \n    #iterate through all the items in tuple \n    for single_item in numbers: \n        print('single_item', single_item) \n \n    #iterate through all the items in dictionary     \n    for first_part, second_part in phonebook.items(): \n        print(first_part,second_part) \n \ntotal(10,1,2,3,Jack=1123,John=2231,Inge=1560) \nOutput:\n$ python function_varargs.py \na 10 \nsingle_item 1 \nsingle_item 2 \nsingle_item 3 \nInge 1560 \nJohn 2231 \nJack 1123 \nIntroduction\n52\nHow It Works\nWhen we declare a starred parameter such as  *param , then all the positional arguments from that point till the end\nare collected as a tuple called 'param'.\nSimilarly, when we declare a double-starred parameter such as  **param , then all the keyword arguments from that\npoint till the end are collected as a dictionary called 'param'.\nWe will explore tuples and dictionaries in a later chapter.\nThe  return  statement\nThe  return  statement is used to return from a function i.e. break out of the function. We can optionally return a\nvalue from the function as well.\nExample (save as  function_return.py ):\ndef maximum(x, y): \n    if x > y: \n        return x \n    elif x == y: \n        return 'The numbers are equal' \n    else: \n        return y \n \nprint(maximum(2, 3)) \nOutput:\n$ python function_return.py \n3 \nHow It Works\nThe  maximum  function returns the maximum of the parameters, in this case the numbers supplied to the function. It\nuses a simple  if..else  statement to find the greater value and then returns that value.\nNote that a  return  statement without a value is equivalent to  return None .  None  is a special type in Python that\nrepresents nothingness. For example, it is used to indicate that a variable has no value if it has a value of  None .\nEvery function implicitly contains a  return None  statement at the end unless you have written your own  return \nstatement. You can see this by running  print(some_function())  where the function  some_function  does not use\nthe  return  statement such as:\ndef some_function(): \n    pass \nThe  pass  statement is used in Python to indicate an empty block of statements.\nTIP: There is a built-in function called  max  that already implements the 'find maximum' functionality, so use\nthis built-in function whenever possible.\nDocStrings\nIntroduction\n53\nPython has a nifty feature called documentation strings, usually referred to by its shorter name docstrings.\nDocStrings are an important tool that you should make use of since it helps to document the program better and\nmakes it easier to understand. Amazingly, we can even get the docstring back from, say a function, when the\nprogram is actually running!\nExample (save as  function_docstring.py ):\ndef print_max(x, y): \n    '''Prints the maximum of two numbers. \n \n    The two values must be integers.''' \n    # convert to integers, if possible \n    x = int(x) \n    y = int(y) \n \n    if x > y: \n        print(x, 'is maximum') \n    else: \n        print(y, 'is maximum') \n \nprint_max(3, 5) \nprint(print_max.__doc__) \nOutput:\n$ python function_docstring.py \n5 is maximum \nPrints the maximum of two numbers. \n \n    The two values must be integers. \nHow It Works\nA string on the first logical line of a function is the docstring for that function. Note that DocStrings also apply to\nmodules and classes which we will learn about in the respective chapters.\nThe convention followed for a docstring is a multi-line string where the first line starts with a capital letter and ends\nwith a dot. Then the second line is blank followed by any detailed explanation starting from the third line. You are\nstrongly advised to follow this convention for all your docstrings for all your non-trivial functions.\nWe can access the docstring of the  print_max  function using the  __doc__  (notice the double underscores)\nattribute (name belonging to) of the function. Just remember that Python treats everything as an object and this\nincludes functions. We'll learn more about objects in the chapter on classes.\nIf you have used  help()  in Python, then you have already seen the usage of docstrings! What it does is just fetch\nthe  __doc__  attribute of that function and displays it in a neat manner for you. You can try it out on the function\nabove - just include  help(print_max)  in your program. Remember to press the  q  key to exit  help .\nAutomated tools can retrieve the documentation from your program in this manner. Therefore, I strongly\nrecommend that you use docstrings for any non-trivial function that you write. The  pydoc  command that comes\nwith your Python distribution works similarly to  help()  using docstrings.\nSummary\nWe have seen so many aspects of functions but note that we still haven't covered all aspects of them. However, we\nhave already covered most of what you'll use regarding Python functions on an everyday basis.\nNext, we will see how to use as well as create Python modules.\nIntroduction\n54\nModules\nYou have seen how you can reuse code in your program by defining functions once. What if you wanted to reuse a\nnumber of functions in other programs that you write? As you might have guessed, the answer is modules.\nThere are various methods of writing modules, but the simplest way is to create a file with a  .py  extension that\ncontains functions and variables.\nAnother method is to write the modules in the native language in which the Python interpreter itself was written. For\nexample, you can write modules in the C programming language and when compiled, they can be used from your\nPython code when using the standard Python interpreter.\nA module can be imported by another program to make use of its functionality. This is how we can use the Python\nstandard library as well. First, we will see how to use the standard library modules.\nExample (save as  module_using_sys.py ):\nimport sys \n \nprint('The command line arguments are:') \nfor i in sys.argv: \n    print(i) \n \nprint('\\n\\nThe PYTHONPATH is', sys.path, '\\n') \nOutput:\n$ python module_using_sys.py we are arguments    # each arg is separated by white space \nThe command line arguments are: \nmodule_using_sys.py \nwe \nare \narguments \n \n \nThe PYTHONPATH is ['/tmp/py', \n# many entries here, not shown here \n'/Library/Python/2.7/site-packages', \n'/usr/local/lib/python2.7/site-packages'] \nHow It Works\nFirst, we import the  sys  module using the  import  statement. Basically, this translates to us telling Python that we\nwant to use this module. The  sys  module contains functionality related to the Python interpreter and its\nenvironment i.e. the system.\nWhen Python executes the  import sys  statement, it looks for the  sys  module. In this case, it is one of the built-in\nmodules, and hence Python knows where to find it.\nIf it was not a compiled module i.e. a module written in Python, then the Python interpreter will search for it in the\ndirectories listed in its  sys.path  variable. If the module is found, then the statements in the body of that module are\nrun and the module is made available for you to use. Note that the initialization is done only the first time that we\nimport a module.\nThe  argv  variable in the  sys  module is accessed using the dotted notation i.e.  sys.argv . It clearly indicates that\nthis name is part of the  sys  module. Another advantage of this approach is that the name does not clash with any\n argv  variable used in your program.\nIntroduction\n55\nThe  sys.argv  variable is a list of strings (lists are explained in detail in a later chapter). Specifically, the  sys.argv \ncontains the list of command line arguments i.e. the arguments passed to your program using the command line.\nIf you are using an IDE to write and run these programs, look for a way to specify command line arguments to the\nprogram in the menus.\nHere, when we execute  python module_using_sys.py we are arguments , we run the module  module_using_sys.py \nwith the  python  command and the other things that follow are arguments passed to the program. Python stores\nthe command line arguments in the  sys.argv  variable for us to use.\nRemember, the name of the script running is always the first element in the  sys.argv  list. So, in this case we will\nhave  'module_using_sys.py'  as  sys.argv[0] ,  'we'  as  sys.argv[1] ,  'are'  as  sys.argv[2]  and  'arguments' \nas  sys.argv[3] . Notice that Python starts counting from 0 and not 1.\nThe  sys.path  contains the list of directory names where modules are imported from. Observe that the first string in\n sys.path  is empty - this empty string indicates that the current directory is also part of the  sys.path  which is\nsame as the  PYTHONPATH  environment variable. This means that you can directly import modules located in the\ncurrent directory. Otherwise, you will have to place your module in one of the directories listed in  sys.path .\nNote that the current directory is the directory from which the program is launched. Run  import os;\nprint(os.getcwd())  to find out the current directory of your program.\nByte-compiled .pyc files\nImporting a module is a relatively costly affair, so Python does some tricks to make it faster. One way is to create\nbyte-compiled files with the extension  .pyc  which is an intermediate form that Python transforms the program into\n(remember the introduction section on how Python works?). This  .pyc  file is useful when you import the module\nthe next time from a different program - it will be much faster since a portion of the processing required in importing\na module is already done. Also, these byte-compiled files are platform-independent.\nNOTE: These  .pyc  files are usually created in the same directory as the corresponding  .py  files. If Python does\nnot have permission to write to files in that directory, then the  .pyc  files will not be created.\nThe from..import statement\nIf you want to directly import the  argv  variable into your program (to avoid typing the  sys.  everytime for it), then\nyou can use the  from sys import argv  statement.\nWARNING: In general, avoid using the  from..import  statement, use the  import  statement instead. This is\nbecause your program will avoid name clashes and will be more readable.\nExample:\nfrom math import sqrt \nprint(\"Square root of 16 is\", sqrt(16)) \nA module's  __name__ \nEvery module has a name and statements in a module can find out the name of their module. This is handy for the\nparticular purpose of figuring out whether the module is being run standalone or being imported. As mentioned\npreviously, when a module is imported for the first time, the code it contains gets executed. We can use this to\nmake the module behave in different ways depending on whether it is being used by itself or being imported from\nanother module. This can be achieved using the  __name__  attribute of the module.\nIntroduction\n56\nExample (save as  module_using_name.py ):\nif __name__ == '__main__': \n    print('This program is being run by itself') \nelse: \n    print('I am being imported from another module') \nOutput:\n$ python module_using_name.py \nThis program is being run by itself \n \n$ python \n>>> import module_using_name \nI am being imported from another module \n>>> \nHow It Works\nEvery Python module has its  __name__  defined. If this is  '__main__' , that implies that the module is being run\nstandalone by the user and we can take appropriate actions.\nMaking Your Own Modules\nCreating your own modules is easy, you've been doing it all along! This is because every Python program is also a\nmodule. You just have to make sure it has a  .py  extension. The following example should make it clear.\nExample (save as  mymodule.py ):\ndef say_hi(): \n    print('Hi, this is mymodule speaking.') \n \n__version__ = '0.1' \nThe above was a sample module. As you can see, there is nothing particularly special about it compared to our\nusual Python program. We will next see how to use this module in our other Python programs.\nRemember that the module should be placed either in the same directory as the program from which we import it,\nor in one of the directories listed in  sys.path .\nAnother module (save as  mymodule_demo.py ):\nimport mymodule \n \nmymodule.say_hi() \nprint('Version', mymodule.__version__) \nOutput:\n$ python mymodule_demo.py \nHi, this is mymodule speaking. \nVersion 0.1 \nHow It Works\nIntroduction\n57\nNotice that we use the same dotted notation to access members of the module. Python makes good reuse of the\nsame notation to give the distinctive 'Pythonic' feel to it so that we don't have to keep learning new ways to do\nthings.\nHere is a version utilising the  from..import  syntax (save as  mymodule_demo2.py ):\nfrom mymodule import say_hi, __version__ \n \nsay_hi() \nprint('Version', __version__) \nThe output of  mymodule_demo2.py  is same as the output of  mymodule_demo.py .\nNotice that if there was already a  __version__  name declared in the module that imports mymodule, there would\nbe a clash. This is also likely because it is common practice for each module to declare it's version number using\nthis name. Hence, it is always recommended to prefer the  import  statement even though it might make your\nprogram a little longer.\nYou could also use:\nfrom mymodule import * \nThis will import all public names such as  say_hi  but would not import  __version__  because it starts with double\nunderscores.\nWARNING: Remember that you should avoid using import-star, i.e.  from mymodule import * .\nZen of Python\nOne of Python's guiding principles is that \"Explicit is better than Implicit\". Run  import this  in Python to learn\nmore.\nThe  dir  function\nThe built-in  dir()  function returns the list of names defined by an object. If the object is a module, this list includes\nfunctions, classes and variables, defined inside that module.\nThis function can accept arguments. If the argument is the name of a module, the function returns the list of names\nfrom that specified module. If there is no argument, the function returns the list of names from the current module.\nExample:\nIntroduction\n58\n$ python \n>>> import sys \n \n# get names of attributes in sys module \n>>> dir(sys) \n['__displayhook__', '__doc__', \n'argv', 'builtin_module_names', \n'version', 'version_info'] \n# only few entries shown here \n \n# get names of attributes for current module \n>>> dir() \n['__builtins__', '__doc__', \n'__name__', '__package__', 'sys'] \n \n# create a new variable 'a' \n>>> a = 5 \n \n>>> dir() \n['__builtins__', '__doc__', '__name__', '__package__', 'sys', 'a'] \n \n# delete/remove a name \n>>> del a \n \n>>> dir() \n['__builtins__', '__doc__', '__name__', '__package__', 'sys'] \nHow It Works\nFirst, we see the usage of  dir  on the imported  sys  module. We can see the huge list of attributes that it\ncontains.\nNext, we use the  dir  function without passing parameters to it. By default, it returns the list of attributes for the\ncurrent module. Notice that the list of imported modules is also part of this list.\nIn order to observe  dir  in action, we define a new variable  a  and assign it a value and then check  dir  and we\nobserve that there is an additional value in the list of the same name. We remove the variable/attribute of the\ncurrent module using the  del  statement and the change is reflected again in the output of the  dir  function.\nA note on  del : This statement is used to delete a variable/name and after the statement has run, in this case  del\na , you can no longer access the variable  a  - it is as if it never existed before at all.\nNote that the  dir()  function works on any object. For example, run  dir(str)  for the attributes of the  str  (string)\nclass.\nThere is also a  vars()  function which can potentially give you the attributes and their values, but it will not work for\nall cases.\nPackages\nBy now, you must have started observing the hierarchy of organizing your programs. Variables usually go inside\nfunctions. Functions and global variables usually go inside modules. What if you wanted to organize modules?\nThat's where packages come into the picture.\nPackages are just folders of modules with a special  __init__.py  file that indicates to Python that this folder is\nspecial because it contains Python modules.\nLet's say you want to create a package called 'world' with subpackages 'asia', 'africa', etc. and these subpackages\nin turn contain modules like 'india', 'madagascar', etc.\nIntroduction\n59\nThis is how you would structure the folders:\n- <some folder present in the sys.path>/ \n    - world/ \n        - __init__.py \n        - asia/ \n            - __init__.py \n            - india/ \n                - __init__.py \n                - foo.py \n        - africa/ \n            - __init__.py \n            - madagascar/ \n                - __init__.py \n                - bar.py \nPackages are just a convenience to organize modules hierarchically. You will see many instances of this in the\nstandard library.\nSummary\nJust like functions are reusable parts of programs, modules are reusable programs. Packages are another\nhierarchy to organize modules. The standard library that comes with Python is an example of such a set of\npackages and modules.\nWe have seen how to use these modules and create our own modules.\nNext, we will learn about some interesting concepts called data structures.\nIntroduction\n60\nData Structures\nData structures are basically just that - they are structures which can hold some data together. In other words, they\nare used to store a collection of related data.\nThere are four built-in data structures in Python - list, tuple, dictionary and set. We will see how to use each of them\nand how they make life easier for us.\nList\nA  list  is a data structure that holds an ordered collection of items i.e. you can store a sequence of items in a list.\nThis is easy to imagine if you can think of a shopping list where you have a list of items to buy, except that you\nprobably have each item on a separate line in your shopping list whereas in Python you put commas in between\nthem.\nThe list of items should be enclosed in square brackets so that Python understands that you are specifying a list.\nOnce you have created a list, you can add, remove or search for items in the list. Since we can add and remove\nitems, we say that a list is a mutable data type i.e. this type can be altered.\nQuick Introduction To Objects And Classes\nAlthough I've been generally delaying the discussion of objects and classes till now, a little explanation is needed\nright now so that you can understand lists better. We will explore this topic in detail in a later chapter.\nA list is an example of usage of objects and classes. When we use a variable  i  and assign a value to it, say\ninteger  5  to it, you can think of it as creating an object (i.e. instance)  i  of class (i.e. type)  int . In fact, you can\nread  help(int)  to understand this better.\nA class can also have methods i.e. functions defined for use with respect to that class only. You can use these\npieces of functionality only when you have an object of that class. For example, Python provides an  append \nmethod for the  list  class which allows you to add an item to the end of the list. For example,  mylist.append('an\nitem')  will add that string to the list  mylist . Note the use of dotted notation for accessing methods of the objects.\nA class can also have fields which are nothing but variables defined for use with respect to that class only. You can\nuse these variables/names only when you have an object of that class. Fields are also accessed by the dotted\nnotation, for example,  mylist.field .\nExample (save as  ds_using_list.py ):\nIntroduction\n61\n# This is my shopping list \nshoplist = ['apple', 'mango', 'carrot', 'banana'] \n \nprint('I have', len(shoplist), 'items to purchase.') \n \nprint('These items are:', end=' ') \nfor item in shoplist: \n    print(item, end=' ') \n \nprint('\\nI also have to buy rice.') \nshoplist.append('rice') \nprint('My shopping list is now', shoplist) \n \nprint('I will sort my list now') \nshoplist.sort() \nprint('Sorted shopping list is', shoplist) \n \nprint('The first item I will buy is', shoplist[0]) \nolditem = shoplist[0] \ndel shoplist[0] \nprint('I bought the', olditem) \nprint('My shopping list is now', shoplist) \nOutput:\n$ python ds_using_list.py \nI have 4 items to purchase. \nThese items are: apple mango carrot banana \nI also have to buy rice. \nMy shopping list is now ['apple', 'mango', 'carrot', 'banana', 'rice'] \nI will sort my list now \nSorted shopping list is ['apple', 'banana', 'carrot', 'mango', 'rice'] \nThe first item I will buy is apple \nI bought the apple \nMy shopping list is now ['banana', 'carrot', 'mango', 'rice'] \nHow It Works\nThe variable  shoplist  is a shopping list for someone who is going to the market. In  shoplist , we only store\nstrings of the names of the items to buy but you can add any kind of object to a list including numbers and even\nother lists.\nWe have also used the  for..in  loop to iterate through the items of the list. By now, you must have realised that a\nlist is also a sequence. The speciality of sequences will be discussed in a later section.\nNotice the use of the  end  parameter in the call to  print  function to indicate that we want to end the output with a\nspace instead of the usual line break.\nNext, we add an item to the list using the  append  method of the list object, as already discussed before. Then, we\ncheck that the item has been indeed added to the list by printing the contents of the list by simply passing the list to\nthe  print  function which prints it neatly.\nThen, we sort the list by using the  sort  method of the list. It is important to understand that this method affects the\nlist itself and does not return a modified list - this is different from the way strings work. This is what we mean by\nsaying that lists are mutable and that strings are immutable.\nNext, when we finish buying an item in the market, we want to remove it from the list. We achieve this by using the\n del  statement. Here, we mention which item of the list we want to remove and the  del  statement removes it\nfrom the list for us. We specify that we want to remove the first item from the list and hence we use  del\nshoplist[0]  (remember that Python starts counting from 0).\nIntroduction\n62\nIf you want to know all the methods defined by the list object, see  help(list)  for details.\nTuple\nTuples are used to hold together multiple objects. Think of them as similar to lists, but without the extensive\nfunctionality that the list class gives you. One major feature of tuples is that they are immutable like strings i.e. you\ncannot modify tuples.\nTuples are defined by specifying items separated by commas within an optional pair of parentheses.\nTuples are usually used in cases where a statement or a user-defined function can safely assume that the collection\nof values (i.e. the tuple of values used) will not change.\nExample (save as  ds_using_tuple.py ):\n# I would recommend always using parentheses \n# to indicate start and end of tuple \n# even though parentheses are optional. \n# Explicit is better than implicit. \nzoo = ('python', 'elephant', 'penguin') \nprint('Number of animals in the zoo is', len(zoo)) \n \nnew_zoo = 'monkey', 'camel', zoo    # parentheses not required but are a good idea \nprint('Number of cages in the new zoo is', len(new_zoo)) \nprint('All animals in new zoo are', new_zoo) \nprint('Animals brought from old zoo are', new_zoo[2]) \nprint('Last animal brought from old zoo is', new_zoo[2][2]) \nprint('Number of animals in the new zoo is', \n      len(new_zoo)-1+len(new_zoo[2])) \nOutput:\n$ python ds_using_tuple.py \nNumber of animals in the zoo is 3 \nNumber of cages in the new zoo is 3 \nAll animals in new zoo are ('monkey', 'camel', ('python', 'elephant', 'penguin')) \nAnimals brought from old zoo are ('python', 'elephant', 'penguin') \nLast animal brought from old zoo is penguin \nNumber of animals in the new zoo is 5 \nHow It Works\nThe variable  zoo  refers to a tuple of items. We see that the  len  function can be used to get the length of the\ntuple. This also indicates that a tuple is a sequence as well.\nWe are now shifting these animals to a new zoo since the old zoo is being closed. Therefore, the  new_zoo  tuple\ncontains some animals which are already there along with the animals brought over from the old zoo. Back to\nreality, note that a tuple within a tuple does not lose its identity.\nWe can access the items in the tuple by specifying the item's position within a pair of square brackets just like we\ndid for lists. This is called the indexing operator. We access the third item in  new_zoo  by specifying  new_zoo[2] \nand we access the third item within the third item in the  new_zoo  tuple by specifying  new_zoo[2][2] . This is pretty\nsimple once you've understood the idiom.\nIntroduction\n63\nTuple with 0 or 1 items\nAn empty tuple is constructed by an empty pair of parentheses such as  myempty = () . However, a tuple with\na single item is not so simple. You have to specify it using a comma following the first (and only) item so that\nPython can differentiate between a tuple and a pair of parentheses surrounding the object in an expression\ni.e. you have to specify  singleton = (2 , )  if you mean you want a tuple containing the item  2 .\nNote for Perl programmers\nA list within a list does not lose its identity i.e. lists are not flattened as in Perl. The same applies to a tuple\nwithin a tuple, or a tuple within a list, or a list within a tuple, etc. As far as Python is concerned, they are just\nobjects stored using another object, that's all.\nDictionary\nA dictionary is like an address-book where you can find the address or contact details of a person by knowing only\nhis/her name i.e. we associate keys (name) with values (details). Note that the key must be unique just like you\ncannot find out the correct information if you have two persons with the exact same name.\nNote that you can use only immutable objects (like strings) for the keys of a dictionary but you can use either\nimmutable or mutable objects for the values of the dictionary. This basically translates to say that you should use\nonly simple objects for keys.\nPairs of keys and values are specified in a dictionary by using the notation  d = {key1 : value1, key2 : value2 } .\nNotice that the key-value pairs are separated by a colon and the pairs are separated themselves by commas and all\nthis is enclosed in a pair of curly braces.\nRemember that key-value pairs in a dictionary are not ordered in any manner. If you want a particular order, then\nyou will have to sort them yourself before using it.\nThe dictionaries that you will be using are instances/objects of the  dict  class.\nExample (save as  ds_using_dict.py ):\n# 'ab' is short for 'a'ddress'b'ook \n \nab = { \n    'Swaroop': 'swaroop@swaroopch.com', \n    'Larry': 'larry@wall.org', \n    'Matsumoto': 'matz@ruby-lang.org', \n    'Spammer': 'spammer@hotmail.com' \n} \n \nprint(\"Swaroop's address is\", ab['Swaroop']) \n \n# Deleting a key-value pair \ndel ab['Spammer'] \n \nprint('\\nThere are {} contacts in the address-book\\n'.format(len(ab))) \n \nfor name, address in ab.items(): \n    print('Contact {} at {}'.format(name, address)) \n \n# Adding a key-value pair \nab['Guido'] = 'guido@python.org' \n \nif 'Guido' in ab: \n    print(\"\\nGuido's address is\", ab['Guido']) \nOutput:\nIntroduction\n64\n$ python ds_using_dict.py \nSwaroop's address is swaroop@swaroopch.com \n \nThere are 3 contacts in the address-book \n \nContact Swaroop at swaroop@swaroopch.com \nContact Matsumoto at matz@ruby-lang.org \nContact Larry at larry@wall.org \n \nGuido's address is guido@python.org \nHow It Works\nWe create the dictionary  ab  using the notation already discussed. We then access key-value pairs by specifying\nthe key using the indexing operator as discussed in the context of lists and tuples. Observe the simple syntax.\nWe can delete key-value pairs using our old friend - the  del  statement. We simply specify the dictionary and the\nindexing operator for the key to be removed and pass it to the  del  statement. There is no need to know the value\ncorresponding to the key for this operation.\nNext, we access each key-value pair of the dictionary using the  items  method of the dictionary which returns a list\nof tuples where each tuple contains a pair of items - the key followed by the value. We retrieve this pair and assign\nit to the variables  name  and  address  correspondingly for each pair using the  for..in  loop and then print these\nvalues in the for-block.\nWe can add new key-value pairs by simply using the indexing operator to access a key and assign that value, as\nwe have done for Guido in the above case.\nWe can check if a key-value pair exists using the  in  operator.\nFor the list of methods of the  dict  class, see  help(dict) .\nKeyword Arguments and Dictionaries\nIf you have used keyword arguments in your functions, you have already used dictionaries! Just think about it\n- the key-value pair is specified by you in the parameter list of the function definition and when you access\nvariables within your function, it is just a key access of a dictionary (which is called the symbol table in\ncompiler design terminology).\nSequence\nLists, tuples and strings are examples of sequences, but what are sequences and what is so special about them?\nThe major features are membership tests, (i.e. the  in  and  not in  expressions) and indexing operations, which\nallow us to fetch a particular item in the sequence directly.\nThe three types of sequences mentioned above - lists, tuples and strings, also have a slicing operation which allows\nus to retrieve a slice of the sequence i.e. a part of the sequence.\nExample (save as  ds_seq.py ):\nIntroduction\n65\nshoplist = ['apple', 'mango', 'carrot', 'banana'] \nname = 'swaroop' \n \n# Indexing or 'Subscription' operation # \nprint('Item 0 is', shoplist[0]) \nprint('Item 1 is', shoplist[1]) \nprint('Item 2 is', shoplist[2]) \nprint('Item 3 is', shoplist[3]) \nprint('Item -1 is', shoplist[-1]) \nprint('Item -2 is', shoplist[-2]) \nprint('Character 0 is', name[0]) \n \n# Slicing on a list # \nprint('Item 1 to 3 is', shoplist[1:3]) \nprint('Item 2 to end is', shoplist[2:]) \nprint('Item 1 to -1 is', shoplist[1:-1]) \nprint('Item start to end is', shoplist[:]) \n \n# Slicing on a string # \nprint('characters 1 to 3 is', name[1:3]) \nprint('characters 2 to end is', name[2:]) \nprint('characters 1 to -1 is', name[1:-1]) \nprint('characters start to end is', name[:]) \nOutput:\n$ python ds_seq.py \nItem 0 is apple \nItem 1 is mango \nItem 2 is carrot \nItem 3 is banana \nItem -1 is banana \nItem -2 is carrot \nCharacter 0 is s \nItem 1 to 3 is ['mango', 'carrot'] \nItem 2 to end is ['carrot', 'banana'] \nItem 1 to -1 is ['mango', 'carrot'] \nItem start to end is ['apple', 'mango', 'carrot', 'banana'] \ncharacters 1 to 3 is wa \ncharacters 2 to end is aroop \ncharacters 1 to -1 is waroo \ncharacters start to end is swaroop \nHow It Works\nFirst, we see how to use indexes to get individual items of a sequence. This is also referred to as the subscription\noperation. Whenever you specify a number to a sequence within square brackets as shown above, Python will fetch\nyou the item corresponding to that position in the sequence. Remember that Python starts counting numbers from\n0. Hence,  shoplist[0]  fetches the first item and  shoplist[3]  fetches the fourth item in the  shoplist  sequence.\nThe index can also be a negative number, in which case, the position is calculated from the end of the sequence.\nTherefore,  shoplist[-1]  refers to the last item in the sequence and  shoplist[-2]  fetches the second last item in\nthe sequence.\nThe slicing operation is used by specifying the name of the sequence followed by an optional pair of numbers\nseparated by a colon within square brackets. Note that this is very similar to the indexing operation you have been\nusing till now. Remember the numbers are optional but the colon isn't.\nThe first number (before the colon) in the slicing operation refers to the position from where the slice starts and the\nsecond number (after the colon) indicates where the slice will stop at. If the first number is not specified, Python will\nstart at the beginning of the sequence. If the second number is left out, Python will stop at the end of the sequence.\nIntroduction\n66\nNote that the slice returned starts at the start position and will end just before the end position i.e. the start position\nis included but the end position is excluded from the sequence slice.\nThus,  shoplist[1:3]  returns a slice of the sequence starting at position 1, includes position 2 but stops at position\n3 and therefore a slice of two items is returned. Similarly,  shoplist[:]  returns a copy of the whole sequence.\nYou can also do slicing with negative positions. Negative numbers are used for positions from the end of the\nsequence. For example,  shoplist[:-1]  will return a slice of the sequence which excludes the last item of the\nsequence but contains everything else.\nYou can also provide a third argument for the slice, which is the step for the slicing (by default, the step size is 1):\n>>> shoplist = ['apple', 'mango', 'carrot', 'banana'] \n>>> shoplist[::1] \n['apple', 'mango', 'carrot', 'banana'] \n>>> shoplist[::2] \n['apple', 'carrot'] \n>>> shoplist[::3] \n['apple', 'banana'] \n>>> shoplist[::-1] \n['banana', 'carrot', 'mango', 'apple'] \nNotice that when the step is 2, we get the items with position 0, 2,... When the step size is 3, we get the items with\nposition 0, 3, etc.\nTry various combinations of such slice specifications using the Python interpreter interactively i.e. the prompt so that\nyou can see the results immediately. The great thing about sequences is that you can access tuples, lists and\nstrings all in the same way!\nSet\nSets are unordered collections of simple objects. These are used when the existence of an object in a collection is\nmore important than the order or how many times it occurs.\nUsing sets, you can test for membership, whether it is a subset of another set, find the intersection between two\nsets, and so on.\n>>> bri = set(['brazil', 'russia', 'india']) \n>>> 'india' in bri \nTrue \n>>> 'usa' in bri \nFalse \n>>> bric = bri.copy() \n>>> bric.add('china') \n>>> bric.issuperset(bri) \nTrue \n>>> bri.remove('russia') \n>>> bri & bric # OR bri.intersection(bric) \n{'brazil', 'india'} \nHow It Works\nIf you remember basic set theory mathematics from school, then this example is fairly self-explanatory. But if not,\nyou can google \"set theory\" and \"Venn diagram\" to better understand our use of sets in Python.\nReferences\nIntroduction\n67\nWhen you create an object and assign it to a variable, the variable only refers to the object and does not represent\nthe object itself! That is, the variable name points to that part of your computer's memory where the object is stored.\nThis is called binding the name to the object.\nGenerally, you don't need to be worried about this, but there is a subtle effect due to references which you need to\nbe aware of:\nExample (save as  ds_reference.py ):\nprint('Simple Assignment') \nshoplist = ['apple', 'mango', 'carrot', 'banana'] \n# mylist is just another name pointing to the same object! \nmylist = shoplist \n \n# I purchased the first item, so I remove it from the list \ndel shoplist[0] \n \nprint('shoplist is', shoplist) \nprint('mylist is', mylist) \n# Notice that both shoplist and mylist both print \n# the same list without the 'apple' confirming that \n# they point to the same object \n \nprint('Copy by making a full slice') \n# Make a copy by doing a full slice \nmylist = shoplist[:] \n# Remove first item \ndel mylist[0] \n \nprint('shoplist is', shoplist) \nprint('mylist is', mylist) \n# Notice that now the two lists are different \nOutput:\n$ python ds_reference.py \nSimple Assignment \nshoplist is ['mango', 'carrot', 'banana'] \nmylist is ['mango', 'carrot', 'banana'] \nCopy by making a full slice \nshoplist is ['mango', 'carrot', 'banana'] \nmylist is ['carrot', 'banana'] \nHow It Works\nMost of the explanation is available in the comments.\nRemember that if you want to make a copy of a list or such kinds of sequences or complex objects (not simple\nobjects such as integers), then you have to use the slicing operation to make a copy. If you just assign the variable\nname to another name, both of them will ''refer'' to the same object and this could be trouble if you are not careful.\nNote for Perl programmers\nRemember that an assignment statement for lists does not create a copy. You have to use slicing operation\nto make a copy of the sequence.\nMore About Strings\nIntroduction\n68\nWe have already discussed strings in detail earlier. What more can there be to know? Well, did you know that\nstrings are also objects and have methods which do everything from checking part of a string to stripping spaces?\nIn fact, you've already been using a string method... the  format  method!\nThe strings that you use in programs are all objects of the class  str . Some useful methods of this class are\ndemonstrated in the next example. For a complete list of such methods, see  help(str) .\nExample (save as  ds_str_methods.py ):\n# This is a string object \nname = 'Swaroop' \n \nif name.startswith('Swa'): \n    print('Yes, the string starts with \"Swa\"') \n \nif 'a' in name: \n    print('Yes, it contains the string \"a\"') \n \nif name.find('war') != -1: \n    print('Yes, it contains the string \"war\"') \n \ndelimiter = '_*_' \nmylist = ['Brazil', 'Russia', 'India', 'China'] \nprint(delimiter.join(mylist)) \nOutput:\n$ python ds_str_methods.py \nYes, the string starts with \"Swa\" \nYes, it contains the string \"a\" \nYes, it contains the string \"war\" \nBrazil_*_Russia_*_India_*_China \nHow It Works\nHere, we see a lot of the string methods in action. The  startswith  method is used to find out whether the string\nstarts with the given string. The  in  operator is used to check if a given string is a part of the string.\nThe  find  method is used to locate the position of the given substring within the string;  find  returns -1 if it is\nunsuccessful in finding the substring. The  str  class also has a neat method to  join  the items of a sequence with\nthe string acting as a delimiter between each item of the sequence and returns a bigger string generated from this.\nSummary\nWe have explored the various built-in data structures of Python in detail. These data structures will be essential for\nwriting programs of reasonable size.\nNow that we have a lot of the basics of Python in place, we will next see how to design and write a real-world\nPython program.\nIntroduction\n69\nProblem Solving\nWe have explored various parts of the Python language and now we will take a look at how all these parts fit\ntogether, by designing and writing a program which does something useful. The idea is to learn how to write a\nPython script on your own.\nThe Problem\nThe problem we want to solve is:\nI want a program which creates a backup of all my important files.\nAlthough, this is a simple problem, there is not enough information for us to get started with the solution. A little\nmore analysis is required. For example, how do we specify which files are to be backed up? How are they stored?\nWhere are they stored?\nAfter analyzing the problem properly, we design our program. We make a list of things about how our program\nshould work. In this case, I have created the following list on how I want it to work. If you do the design, you may not\ncome up with the same kind of analysis since every person has their own way of doing things, so that is perfectly\nokay.\nThe files and directories to be backed up are specified in a list.\nThe backup must be stored in a main backup directory.\nThe files are backed up into a zip file.\nThe name of the zip archive is the current date and time.\nWe use the standard  zip  command available by default in any standard GNU/Linux or Unix distribution. Note\nthat you can use any archiving command you want as long as it has a command line interface.\nFor Windows users\nWindows users can install the  zip  command from the GnuWin32 project page and add  C:\\Program\nFiles\\GnuWin32\\bin  to your system  PATH  environment variable, similar to what we did for recognizing the\npython command itself.\nThe Solution\nAs the design of our program is now reasonably stable, we can write the code which is an implementation of our\nsolution.\nSave as  backup_ver1.py :\nIntroduction\n70\nimport os \nimport time \n \n# 1. The files and directories to be backed up are \n# specified in a list. \n# Example on Windows: \n# source = ['\"C:\\\\My Documents\"'] \n# Example on Mac OS X and Linux: \nsource = ['/Users/swa/notes'] \n# Notice we have to use double quotes inside a string \n# for names with spaces in it.  We could have also used \n# a raw string by writing [r'C:\\My Documents']. \n \n# 2. The backup must be stored in a \n# main backup directory \n# Example on Windows: \n# target_dir = 'E:\\\\Backup' \n# Example on Mac OS X and Linux: \ntarget_dir = '/Users/swa/backup' \n# Remember to change this to which folder you will be using \n \n# 3. The files are backed up into a zip file. \n# 4. The name of the zip archive is the current date and time \ntarget = target_dir + os.sep + \\ \n         time.strftime('%Y%m%d%H%M%S') + '.zip' \n \n# Create target directory if it is not present \nif not os.path.exists(target_dir): \n    os.mkdir(target_dir)  # make directory \n \n# 5. We use the zip command to put the files in a zip archive \nzip_command = 'zip -r {0} {1}'.format(target, \n                                      ' '.join(source)) \n \n# Run the backup \nprint('Zip command is:') \nprint(zip_command) \nprint('Running:') \nif os.system(zip_command) == 0: \n    print('Successful backup to', target) \nelse: \n    print('Backup FAILED') \nOutput:\n$ python backup_ver1.py \nZip command is: \nzip -r /Users/swa/backup/20140328084844.zip /Users/swa/notes \nRunning: \n  adding: Users/swa/notes/ (stored 0%) \n  adding: Users/swa/notes/blah1.txt (stored 0%) \n  adding: Users/swa/notes/blah2.txt (stored 0%) \n  adding: Users/swa/notes/blah3.txt (stored 0%) \nSuccessful backup to /Users/swa/backup/20140328084844.zip \nNow, we are in the testing phase where we test that our program works properly. If it doesn't behave as expected,\nthen we have to debug our program i.e. remove the bugs (errors) from the program.\nIf the above program does not work for you, copy the line printed after the  Zip command is  line in the output, paste\nit in the shell (on GNU/Linux and Mac OS X) /  cmd  (on Windows), see what the error is and try to fix it. Also check\nthe zip command manual on what could be wrong. If this command succeeds, then the problem might be in the\nPython program itself, so check if it exactly matches the program written above.\nHow It Works\nIntroduction\n71\nYou will notice how we have converted our design into code in a step-by-step manner.\nWe make use of the  os  and  time  modules by first importing them. Then, we specify the files and directories to be\nbacked up in the  source  list. The target directory is where we store all the backup files and this is specified in the\n target_dir  variable. The name of the zip archive that we are going to create is the current date and time which we\ngenerate using the  time.strftime()  function. It will also have the  .zip  extension and will be stored in the\n target_dir  directory.\nNotice the use of the  os.sep  variable - this gives the directory separator according to your operating system, i.e. it\nwill be  '/'  in GNU/Linux, Unix, macOS, and will be  '\\\\'  in Windows. Using  os.sep  instead of these characters\ndirectly will make our program portable and work across all of these systems.\nThe  time.strftime()  function takes a specification such as the one we have used in the above program. The  %Y \nspecification will be replaced by the year with the century. The  %m  specification will be replaced by the month as a\ndecimal number between  01  and  12  and so on. The complete list of such specifications can be found in the\nPython Reference Manual.\nWe create the name of the target zip file using the addition operator which concatenates the strings i.e. it joins the\ntwo strings together and returns a new one. Then, we create a string  zip_command  which contains the command\nthat we are going to execute. You can check if this command works by running it in the shell (GNU/Linux terminal or\nDOS prompt).\nThe  zip  command that we are using has some options available, and one of these options is  -r . The  -r  option\nspecifies that the zip command should work recursively for directories, i.e. it should include all the subdirectories\nand files. Options are followed by the name of the zip archive to create, followed by the list of files and directories to\nbackup. We convert the  source  list into a string using the  join  method of strings which we have already seen\nhow to use.\nThen, we finally run the command using the  os.system  function which runs the command as if it was run from the\nsystem i.e. in the shell - it returns  0  if the command was successfully, else it returns an error number.\nDepending on the outcome of the command, we print the appropriate message that the backup has failed or\nsucceeded.\nThat's it, we have created a script to take a backup of our important files!\nNote to Windows Users\nInstead of double backslash escape sequences, you can also use raw strings. For example, use\n 'C:\\\\Documents'  or  r'C:\\Documents' . However, do not use  'C:\\Documents'  since you end up using an\nunknown escape sequence  \\D .\nNow that we have a working backup script, we can use it whenever we want to take a backup of the files. This is\ncalled the operation phase or the deployment phase of the software.\nThe above program works properly, but (usually) first programs do not work exactly as you expect. For example,\nthere might be problems if you have not designed the program properly or if you have made a mistake when typing\nthe code, etc. Appropriately, you will have to go back to the design phase or you will have to debug your program.\nSecond Version\nThe first version of our script works. However, we can make some refinements to it so that it can work better on a\ndaily basis. This is called the maintenance phase of the software.\nIntroduction\n72\nOne of the refinements I felt was useful is a better file-naming mechanism - using the time as the name of the file\nwithin a directory with the current date as a directory within the main backup directory. The first advantage is that\nyour backups are stored in a hierarchical manner and therefore it is much easier to manage. The second advantage\nis that the filenames are much shorter. The third advantage is that separate directories will help you check if you\nhave made a backup for each day since the directory would be created only if you have made a backup for that day.\nSave as  backup_ver2.py :\nimport os \nimport time \n \n# 1. The files and directories to be backed up are \n# specified in a list. \n# Example on Windows: \n# source = ['\"C:\\\\My Documents\"', 'C:\\\\Code'] \n# Example on Mac OS X and Linux: \nsource = ['/Users/swa/notes'] \n# Notice we had to use double quotes inside the string \n# for names with spaces in it. \n \n# 2. The backup must be stored in a \n# main backup directory \n# Example on Windows: \n# target_dir = 'E:\\\\Backup' \n# Example on Mac OS X and Linux: \ntarget_dir = '/Users/swa/backup' \n# Remember to change this to which folder you will be using \n \n# Create target directory if it is not present \nif not os.path.exists(target_dir): \n    os.mkdir(target_dir)  # make directory \n \n# 3. The files are backed up into a zip file. \n# 4. The current day is the name of the subdirectory \n# in the main directory. \ntoday = target_dir + os.sep + time.strftime('%Y%m%d') \n# The current time is the name of the zip archive. \nnow = time.strftime('%H%M%S') \n \n# The name of the zip file \ntarget = today + os.sep + now + '.zip' \n \n# Create the subdirectory if it isn't already there \nif not os.path.exists(today): \n    os.mkdir(today) \n    print('Successfully created directory', today) \n \n# 5. We use the zip command to put the files in a zip archive \nzip_command = 'zip -r {0} {1}'.format(target, \n                                      ' '.join(source)) \n \n# Run the backup \nprint('Zip command is:') \nprint(zip_command) \nprint('Running:') \nif os.system(zip_command) == 0: \n    print('Successful backup to', target) \nelse: \n    print('Backup FAILED') \nOutput:\nIntroduction\n73\n$ python backup_ver2.py \nSuccessfully created directory /Users/swa/backup/20140329 \nZip command is: \nzip -r /Users/swa/backup/20140329/073201.zip /Users/swa/notes \nRunning: \n  adding: Users/swa/notes/ (stored 0%) \n  adding: Users/swa/notes/blah1.txt (stored 0%) \n  adding: Users/swa/notes/blah2.txt (stored 0%) \n  adding: Users/swa/notes/blah3.txt (stored 0%) \nSuccessful backup to /Users/swa/backup/20140329/073201.zip \nHow It Works\nMost of the program remains the same. The changes are that we check if there is a directory with the current day\nas its name inside the main backup directory using the  os.path.exists  function. If it doesn't exist, we create it\nusing the  os.mkdir  function.\nThird Version\nThe second version works fine when I do many backups, but when there are lots of backups, I am finding it hard to\ndifferentiate what the backups were for! For example, I might have made some major changes to a program or\npresentation, then I want to associate what those changes are with the name of the zip archive. This can be easily\nachieved by attaching a user-supplied comment to the name of the zip archive.\nWARNING: The following program does not work, so do not be alarmed, please follow along because there's a\nlesson in here.\nSave as  backup_ver3.py :\nIntroduction\n74\nimport os \nimport time \n \n# 1. The files and directories to be backed up are \n# specified in a list. \n# Example on Windows: \n# source = ['\"C:\\\\My Documents\"', 'C:\\\\Code'] \n# Example on Mac OS X and Linux: \nsource = ['/Users/swa/notes'] \n# Notice we had to use double quotes inside the string \n# for names with spaces in it. \n \n# 2. The backup must be stored in a \n# main backup directory \n# Example on Windows: \n# target_dir = 'E:\\\\Backup' \n# Example on Mac OS X and Linux: \ntarget_dir = '/Users/swa/backup' \n# Remember to change this to which folder you will be using \n \n# Create target directory if it is not present \nif not os.path.exists(target_dir): \n    os.mkdir(target_dir)  # make directory \n \n# 3. The files are backed up into a zip file. \n# 4. The current day is the name of the subdirectory \n# in the main directory. \ntoday = target_dir + os.sep + time.strftime('%Y%m%d') \n# The current time is the name of the zip archive. \nnow = time.strftime('%H%M%S') \n \n# Take a comment from the user to \n# create the name of the zip file \ncomment = input('Enter a comment --> ') \n# Check if a comment was entered \nif len(comment) == 0: \n    target = today + os.sep + now + '.zip' \nelse: \n    target = today + os.sep + now + '_' +  \n        comment.replace(' ', '_') + '.zip' \n \n# Create the subdirectory if it isn't already there \nif not os.path.exists(today): \n    os.mkdir(today) \n    print('Successfully created directory', today) \n \n# 5. We use the zip command to put the files in a zip archive \nzip_command = \"zip -r {0} {1}\".format(target, \n                                      ' '.join(source)) \n \n# Run the backup \nprint('Zip command is:') \nprint(zip_command) \nprint('Running:') \nif os.system(zip_command) == 0: \n    print('Successful backup to', target) \nelse: \n    print('Backup FAILED') \nOutput:\n$ python backup_ver3.py \n  File \"backup_ver3.py\", line 39 \n    target = today + os.sep + now + '_' + \n                                        ^ \nSyntaxError: invalid syntax \nIntroduction\n75\nHow This (does not) Work\nThis program does not work! Python says there is a syntax error which means that the script does not satisfy the\nstructure that Python expects to see. When we observe the error given by Python, it also tells us the place where it\ndetected the error as well. So we start debugging our program from that line.\nOn careful observation, we see that the single logical line has been split into two physical lines but we have not\nspecified that these two physical lines belong together. Basically, Python has found the addition operator ( + )\nwithout any operand in that logical line and hence it doesn't know how to continue. Remember that we can specify\nthat the logical line continues in the next physical line by the use of a backslash at the end of the physical line. So,\nwe make this correction to our program. This correction of the program when we find errors is called bug fixing.\nFourth Version\nSave as  backup_ver4.py :\nIntroduction\n76\nimport os \nimport time \n \n# 1. The files and directories to be backed up are \n# specified in a list. \n# Example on Windows: \n# source = ['\"C:\\\\My Documents\"', 'C:\\\\Code'] \n# Example on Mac OS X and Linux: \nsource = ['/Users/swa/notes'] \n# Notice we had to use double quotes inside the string \n# for names with spaces in it. \n \n# 2. The backup must be stored in a \n# main backup directory \n# Example on Windows: \n# target_dir = 'E:\\\\Backup' \n# Example on Mac OS X and Linux: \ntarget_dir = '/Users/swa/backup' \n# Remember to change this to which folder you will be using \n \n# Create target directory if it is not present \nif not os.path.exists(target_dir): \n    os.mkdir(target_dir)  # make directory \n \n# 3. The files are backed up into a zip file. \n# 4. The current day is the name of the subdirectory \n# in the main directory. \ntoday = target_dir + os.sep + time.strftime('%Y%m%d') \n# The current time is the name of the zip archive. \nnow = time.strftime('%H%M%S') \n \n# Take a comment from the user to \n# create the name of the zip file \ncomment = input('Enter a comment --> ') \n# Check if a comment was entered \nif len(comment) == 0: \n    target = today + os.sep + now + '.zip' \nelse: \n    target = today + os.sep + now + '_' + \\ \n        comment.replace(' ', '_') + '.zip' \n \n# Create the subdirectory if it isn't already there \nif not os.path.exists(today): \n    os.mkdir(today) \n    print('Successfully created directory', today) \n \n# 5. We use the zip command to put the files in a zip archive \nzip_command = 'zip -r {0} {1}'.format(target, \n                                      ' '.join(source)) \n \n# Run the backup \nprint('Zip command is:') \nprint(zip_command) \nprint('Running:') \nif os.system(zip_command) == 0: \n    print('Successful backup to', target) \nelse: \n    print('Backup FAILED') \nOutput:\nIntroduction\n77\n$ python backup_ver4.py \nEnter a comment --> added new examples \nZip command is: \nzip -r /Users/swa/backup/20140329/074122_added_new_examples.zip /Users/swa/notes \nRunning: \n  adding: Users/swa/notes/ (stored 0%) \n  adding: Users/swa/notes/blah1.txt (stored 0%) \n  adding: Users/swa/notes/blah2.txt (stored 0%) \n  adding: Users/swa/notes/blah3.txt (stored 0%) \nSuccessful backup to /Users/swa/backup/20140329/074122_added_new_examples.zip \nHow It Works\nThis program now works! Let us go through the actual enhancements that we had made in version 3. We take in\nthe user's comments using the  input  function and then check if the user actually entered something by finding out\nthe length of the input using the  len  function. If the user has just pressed  enter  without entering anything\n(maybe it was just a routine backup or no special changes were made), then we proceed as we have done before.\nHowever, if a comment was supplied, then this is attached to the name of the zip archive just before the  .zip \nextension. Notice that we are replacing spaces in the comment with underscores - this is because managing\nfilenames without spaces is much easier.\nMore Refinements\nThe fourth version is a satisfactorily working script for most users, but there is always room for improvement. For\nexample, you can include a verbosity level for the zip command by specifying a  -v  option to make your program\nbecome more talkative or a  -q  option to make it quiet.\nAnother possible enhancement would be to allow extra files and directories to be passed to the script at the\ncommand line. We can get these names from the  sys.argv  list and we can add them to our  source  list using the\n extend  method provided by the  list  class.\nThe most important refinement would be to not use the  os.system  way of creating archives and instead using the\nzipfile or tarfile built-in modules to create these archives. They are part of the standard library and available already\nfor you to use without external dependencies on the zip program to be available on your computer.\nHowever, I have been using the  os.system  way of creating a backup in the above examples purely for pedagogical\npurposes, so that the example is simple enough to be understood by everybody but real enough to be useful.\nCan you try writing the fifth version that uses the zipfile module instead of the  os.system  call?\nThe Software Development Process\nWe have now gone through the various phases in the process of writing a software. These phases can be\nsummarised as follows:\n1. What (Analysis)\n2. How (Design)\n3. Do It (Implementation)\n4. Test (Testing and Debugging)\n5. Use (Operation or Deployment)\n6. Maintain (Refinement)\nIntroduction\n78\nA recommended way of writing programs is the procedure we have followed in creating the backup script: Do the\nanalysis and design. Start implementing with a simple version. Test and debug it. Use it to ensure that it works as\nexpected. Now, add any features that you want and continue to repeat the Do It-Test-Use cycle as many times as\nrequired.\nRemember:\nSoftware is grown, not built. -- Bill de hÓra\nSummary\nWe have seen how to create our own Python programs/scripts and the various stages involved in writing such\nprograms. You may find it useful to create your own program just like we did in this chapter so that you become\ncomfortable with Python as well as problem-solving.\nNext, we will discuss object-oriented programming.\nIntroduction\n79\nObject Oriented Programming\nIn all the programs we wrote till now, we have designed our program around functions i.e. blocks of statements\nwhich manipulate data. This is called the procedure-oriented way of programming. There is another way of\norganizing your program which is to combine data and functionality and wrap it inside something called an object.\nThis is called the object oriented programming paradigm. Most of the time you can use procedural programming,\nbut when writing large programs or have a problem that is better suited to this method, you can use object oriented\nprogramming techniques.\nClasses and objects are the two main aspects of object oriented programming. A class creates a new type where\nobjects are instances of the class. An analogy is that you can have variables of type  int  which translates to\nsaying that variables that store integers are variables which are instances (objects) of the  int  class.\nNote for Static Language Programmers\nNote that even integers are treated as objects (of the  int  class). This is unlike C++ and Java (before\nversion 1.5) where integers are primitive native types.\nSee  help(int)  for more details on the class.\nC# and Java 1.5 programmers will find this similar to the boxing and unboxing concept.\nObjects can store data using ordinary variables that belong to the object. Variables that belong to an object or class\nare referred to as fields. Objects can also have functionality by using functions that belong to a class. Such\nfunctions are called methods of the class. This terminology is important because it helps us to differentiate\nbetween functions and variables which are independent and those which belong to a class or object. Collectively,\nthe fields and methods can be referred to as the attributes of that class.\nFields are of two types - they can belong to each instance/object of the class or they can belong to the class itself.\nThey are called instance variables and class variables respectively.\nA class is created using the  class  keyword. The fields and methods of the class are listed in an indented block.\nThe  self \nClass methods have only one specific difference from ordinary functions - they must have an extra first name that\nhas to be added to the beginning of the parameter list, but you do not give a value for this parameter when you call\nthe method, Python will provide it. This particular variable refers to the object itself, and by convention, it is given\nthe name  self .\nAlthough, you can give any name for this parameter, it is strongly recommended that you use the name  self  - any\nother name is definitely frowned upon. There are many advantages to using a standard name - any reader of your\nprogram will immediately recognize it and even specialized IDEs (Integrated Development Environments) can help\nyou if you use  self .\nNote for C++/Java/C# Programmers\nThe  self  in Python is equivalent to the  this  pointer in C++ and the  this  reference in Java and C#.\nYou must be wondering how Python gives the value for  self  and why you don't need to give a value for it. An\nexample will make this clear. Say you have a class called  MyClass  and an instance of this class called  myobject .\nWhen you call a method of this object as  myobject.method(arg1, arg2) , this is automatically converted by Python\ninto  MyClass.method(myobject, arg1, arg2)  - this is all the special  self  is about.\nIntroduction\n80\nThis also means that if you have a method which takes no arguments, then you still have to have one argument -\nthe  self .\nClasses\nThe simplest class possible is shown in the following example (save as  oop_simplestclass.py ).\nclass Person: \n    pass  # An empty block \n \np = Person() \nprint(p) \nOutput:\n$ python oop_simplestclass.py \n<__main__.Person instance at 0x10171f518> \nHow It Works\nWe create a new class using the  class  statement and the name of the class. This is followed by an indented block\nof statements which form the body of the class. In this case, we have an empty block which is indicated using the\n pass  statement.\nNext, we create an object/instance of this class using the name of the class followed by a pair of parentheses. (We\nwill learn more about instantiation in the next section). For our verification, we confirm the type of the variable by\nsimply printing it. It tells us that we have an instance of the  Person  class in the  __main__  module.\nNotice that the address of the computer memory where your object is stored is also printed. The address will have a\ndifferent value on your computer since Python can store the object wherever it finds space.\nMethods\nWe have already discussed that classes/objects can have methods just like functions except that we have an extra\n self  variable. We will now see an example (save as  oop_method.py ).\nclass Person: \n    def say_hi(self):\n        print('Hello, how are you?') \n \np = Person() \np.say_hi() \n# The previous 2 lines can also be written as \n# Person().say_hi() \nOutput:\n$ python oop_method.py \nHello, how are you? \nHow It Works\nHere we see the  self  in action. Notice that the  say_hi  method takes no parameters but still has the  self  in the\nfunction definition.\nIntroduction\n81\nThe  __init__  method\nThere are many method names which have special significance in Python classes. We will see the significance of\nthe  __init__  method now.\nThe  __init__  method is run as soon as an object of a class is instantiated (i.e. created). The method is useful to\ndo any initialization (i.e. passing initial values to your object) you want to do with your object. Notice the double\nunderscores both at the beginning and at the end of the name.\nExample (save as  oop_init.py ):\nclass Person: \n    def __init__(self, name): \n        self.name = name \n \n    def say_hi(self):\n        print('Hello, my name is', self.name) \n \np = Person('Swaroop') \np.say_hi() \n# The previous 2 lines can also be written as \n# Person('Swaroop').say_hi() \nOutput:\n$ python oop_init.py \nHello, my name is Swaroop \nHow It Works\nHere, we define the  __init__  method as taking a parameter  name  (along with the usual  self ). Here, we just\ncreate a new field also called  name . Notice these are two different variables even though they are both called\n'name'. There is no problem because the dotted notation  self.name  means that there is something called \"name\"\nthat is part of the object called \"self\" and the other  name  is a local variable. Since we explicitly indicate which name\nwe are referring to, there is no confusion.\nWhen creating new instance  p , of the class  Person , we do so by using the class name, followed by the\narguments in the parentheses: p = Person('Swaroop').\nWe do not explicitly call the  __init__  method. This is the special significance of this method.\nNow, we are able to use the  self.name  field in our methods which is demonstrated in the  say_hi  method.\nClass And Object Variables\nWe have already discussed the functionality part of classes and objects (i.e. methods), now let us learn about the\ndata part. The data part, i.e. fields, are nothing but ordinary variables that are bound to the namespaces of the\nclasses and objects. This means that these names are valid within the context of these classes and objects only.\nThat's why they are called name spaces.\nThere are two types of fields - class variables and object variables which are classified depending on whether the\nclass or the object owns the variables respectively.\nClass variables are shared - they can be accessed by all instances of that class. There is only one copy of the\nclass variable and when any one object makes a change to a class variable, that change will be seen by all the\nother instances.\nIntroduction\n82\nObject variables are owned by each individual object/instance of the class. In this case, each object has its own\ncopy of the field i.e. they are not shared and are not related in any way to the field by the same name in a different\ninstance. An example will make this easy to understand (save as  oop_objvar.py ):\nclass Robot: \n    \"\"\"Represents a robot, with a name.\"\"\" \n \n    # A class variable, counting the number of robots \n    population = 0 \n \n    def __init__(self, name): \n        \"\"\"Initializes the data.\"\"\" \n        self.name = name \n        print(\"(Initializing {})\".format(self.name)) \n \n        # When this person is created, the robot \n        # adds to the population \n        Robot.population += 1 \n \n    def die(self): \n        \"\"\"I am dying.\"\"\" \n        print(\"{} is being destroyed!\".format(self.name)) \n \n        Robot.population -= 1 \n \n        if Robot.population == 0: \n            print(\"{} was the last one.\".format(self.name)) \n        else: \n            print(\"There are still {:d} robots working.\".format( \n                Robot.population)) \n \n    def say_hi(self):\n        \"\"\"Greeting by the robot. \n \n        Yeah, they can do that.\"\"\" \n        print(\"Greetings, my masters call me {}.\".format(self.name)) \n \n    @classmethod \n    def how_many(cls): \n        \"\"\"Prints the current population.\"\"\" \n        print(\"We have {:d} robots.\".format(cls.population)) \n \n \ndroid1 = Robot(\"R2-D2\") \ndroid1.say_hi() \nRobot.how_many() \n \ndroid2 = Robot(\"C-3PO\") \ndroid2.say_hi() \nRobot.how_many() \n \nprint(\"\\nRobots can do some work here.\\n\") \n \nprint(\"Robots have finished their work. So let's destroy them.\") \ndroid1.die() \ndroid2.die() \n \nRobot.how_many() \nOutput:\nIntroduction\n83\n$ python oop_objvar.py \n(Initializing R2-D2) \nGreetings, my masters call me R2-D2. \nWe have 1 robots. \n(Initializing C-3PO) \nGreetings, my masters call me C-3PO. \nWe have 2 robots. \n \nRobots can do some work here. \n \nRobots have finished their work. So let's destroy them. \nR2-D2 is being destroyed! \nThere are still 1 robots working. \nC-3PO is being destroyed! \nC-3PO was the last one. \nWe have 0 robots. \nHow It Works\nThis is a long example but helps demonstrate the nature of class and object variables. Here,  population  belongs\nto the  Robot  class and hence is a class variable. The  name  variable belongs to the object (it is assigned using\n self ) and hence is an object variable.\nThus, we refer to the  population  class variable as  Robot.population  and not as  self.population . We refer to the\nobject variable  name  using  self.name  notation in the methods of that object. Remember this simple difference\nbetween class and object variables. Also note that an object variable with the same name as a class variable will\nhide the class variable!\nInstead of  Robot.population , we could have also used  self.__class__.population  because every object refers to\nits class via the  self.__class__  attribute.\nThe  how_many  is actually a method that belongs to the class and not to the object. This means we can define it as\neither a  classmethod  or a  staticmethod  depending on whether we need to know which class we are part of. Since\nwe refer to a class variable, let's use  classmethod .\nWe have marked the  how_many  method as a class method using a decorator.\nDecorators can be imagined to be a shortcut to calling a wrapper function (i.e. a function that \"wraps\" around\nanother function so that it can do something before or after the inner function), so applying the  @classmethod \ndecorator is the same as calling:\nhow_many = classmethod(how_many) \nObserve that the  __init__  method is used to initialize the  Robot  instance with a name. In this method, we\nincrease the  population  count by 1 since we have one more robot being added. Also observe that the values of\n self.name  is specific to each object which indicates the nature of object variables.\nRemember, that you must refer to the variables and methods of the same object using the  self  only. This is called\nan attribute reference.\nIn this program, we also see the use of docstrings for classes as well as methods. We can access the class\ndocstring at runtime using  Robot.__doc__  and the method docstring as  Robot.say_hi.__doc__ \nIn the  die  method, we simply decrease the  Robot.population  count by 1.\nAll class members are public. One exception: If you use data members with names using the double underscore\nprefix such as  __privatevar , Python uses name-mangling to effectively make it a private variable.\nIntroduction\n84\nThus, the convention followed is that any variable that is to be used only within the class or object should begin with\nan underscore and all other names are public and can be used by other classes/objects. Remember that this is only\na convention and is not enforced by Python (except for the double underscore prefix).\nNote for C++/Java/C# Programmers\nAll class members (including the data members) are public and all the methods are virtual in Python.\nInheritance\nOne of the major benefits of object oriented programming is reuse of code and one of the ways this is achieved is\nthrough the inheritance mechanism. Inheritance can be best imagined as implementing a type and subtype\nrelationship between classes.\nSuppose you want to write a program which has to keep track of the teachers and students in a college. They have\nsome common characteristics such as name, age and address. They also have specific characteristics such as\nsalary, courses and leaves for teachers and, marks and fees for students.\nYou can create two independent classes for each type and process them but adding a new common characteristic\nwould mean adding to both of these independent classes. This quickly becomes unwieldy.\nA better way would be to create a common class called  SchoolMember  and then have the teacher and student\nclasses inherit from this class, i.e. they will become sub-types of this type (class) and then we can add specific\ncharacteristics to these sub-types.\nThere are many advantages to this approach. If we add/change any functionality in  SchoolMember , this is\nautomatically reflected in the subtypes as well. For example, you can add a new ID card field for both teachers and\nstudents by simply adding it to the SchoolMember class. However, changes in the subtypes do not affect other\nsubtypes. Another advantage is that you can refer to a teacher or student object as a  SchoolMember  object which\ncould be useful in some situations such as counting of the number of school members. This is called\npolymorphism where a sub-type can be substituted in any situation where a parent type is expected, i.e. the object\ncan be treated as an instance of the parent class.\nAlso observe that we reuse the code of the parent class and we do not need to repeat it in the different classes as\nwe would have had to in case we had used independent classes.\nThe  SchoolMember  class in this situation is known as the base class or the superclass. The  Teacher  and\n Student  classes are called the derived classes or subclasses.\nWe will now see this example as a program (save as  oop_subclass.py ):\nIntroduction\n85\nclass SchoolMember: \n    '''Represents any school member.''' \n    def __init__(self, name, age): \n        self.name = name \n        self.age = age \n        print('(Initialized SchoolMember: {})'.format(self.name)) \n \n    def tell(self): \n        '''Tell my details.''' \n        print('Name:\"{}\" Age:\"{}\"'.format(self.name, self.age), end=\" \") \n \n \nclass Teacher(SchoolMember): \n    '''Represents a teacher.''' \n    def __init__(self, name, age, salary): \n        SchoolMember.__init__(self, name, age) \n        self.salary = salary \n        print('(Initialized Teacher: {})'.format(self.name)) \n \n    def tell(self): \n        SchoolMember.tell(self) \n        print('Salary: \"{:d}\"'.format(self.salary)) \n \n \nclass Student(SchoolMember): \n    '''Represents a student.''' \n    def __init__(self, name, age, marks): \n        SchoolMember.__init__(self, name, age) \n        self.marks = marks \n        print('(Initialized Student: {})'.format(self.name)) \n \n    def tell(self): \n        SchoolMember.tell(self) \n        print('Marks: \"{:d}\"'.format(self.marks)) \n \nt = Teacher('Mrs. Shrividya', 40, 30000) \ns = Student('Swaroop', 25, 75) \n \n# prints a blank line \nprint() \n \nmembers = [t, s] \nfor member in members: \n    # Works for both Teachers and Students \n    member.tell() \nOutput:\n$ python oop_subclass.py \n(Initialized SchoolMember: Mrs. Shrividya) \n(Initialized Teacher: Mrs. Shrividya) \n(Initialized SchoolMember: Swaroop) \n(Initialized Student: Swaroop) \n \nName:\"Mrs. Shrividya\" Age:\"40\" Salary: \"30000\" \nName:\"Swaroop\" Age:\"25\" Marks: \"75\" \nHow It Works\nTo use inheritance, we specify the base class names in a tuple following the class name in the class definition (for\nexample,  class Teacher(SchoolMember) ). Next, we observe that the  __init__  method of the base class is explicitly\ncalled using the  self  variable so that we can initialize the base class part of an instance in the subclass. This is\nIntroduction\n86\nvery important to remember- Since we are defining a  __init__  method in  Teacher  and  Student  subclasses,\nPython does not automatically call the constructor of the base class  SchoolMember , you have to explicitly call it\nyourself.\nIn contrast, if we have not defined an  __init__  method in a subclass, Python will call the constructor of the base\nclass automatically.\nWhile we could treat instances of  Teacher  or  Student  as we would an instance of  SchoolMember  and access the\n tell  method of  SchoolMember  by simply typing  Teacher.tell  or  Student.tell , we instead define another  tell \nmethod in each subclass (using the  tell  method of  SchoolMember  for part of it) to tailor it for that subclass.\nBecause we have done this, when we write  Teacher.tell  Python uses the  tell  method for that subclass vs the\nsuperclass. However, if we did not have a  tell  method in the subclass, Python would use the  tell  method in\nthe superclass. Python always starts looking for methods in the actual subclass type first, and if it doesnt find\nanything, it starts looking at the methods in the subclasss base classes, one by one in the order they are specified\nin the tuple (here we only have 1 base class, but you can have multiple base classes) in the class definition.\nA note on terminology - if more than one class is listed in the inheritance tuple, then it is called multiple\ninheritance.\nThe  end  parameter is used in the  print  function in the superclass's  tell()  method to print a line and allow the\nnext print to continue on the same line. This is a trick to make  print  not print a  \\n  (newline) symbol at the end of\nthe printing.\nSummary\nWe have now explored the various aspects of classes and objects as well as the various terminologies associated\nwith it. We have also seen the benefits and pitfalls of object-oriented programming. Python is highly object-oriented\nand understanding these concepts carefully will help you a lot in the long run.\nNext, we will learn how to deal with input/output and how to access files in Python.\nIntroduction\n87\nInput and Output\nThere will be situations where your program has to interact with the user. For example, you would want to take input\nfrom the user and then print some results back. We can achieve this using the  input()  function and  print \nfunction respectively.\nFor output, we can also use the various methods of the  str  (string) class. For example, you can use the  rjust \nmethod to get a string which is right justified to a specified width. See  help(str)  for more details.\nAnother common type of input/output is dealing with files. The ability to create, read and write files is essential to\nmany programs and we will explore this aspect in this chapter.\nInput from user\nSave this program as  io_input.py :\ndef reverse(text): \n    return text[::-1] \n \n \ndef is_palindrome(text): \n    return text == reverse(text) \n \n \nsomething = input(\"Enter text: \") \nif is_palindrome(something): \n    print(\"Yes, it is a palindrome\") \nelse: \n    print(\"No, it is not a palindrome\") \nOutput:\n$ python3 io_input.py \nEnter text: sir \nNo, it is not a palindrome \n \n$ python3 io_input.py \nEnter text: madam \nYes, it is a palindrome \n \n$ python3 io_input.py \nEnter text: racecar \nYes, it is a palindrome \nHow It Works\nWe use the slicing feature to reverse the text. We've already seen how we can make slices from sequences using\nthe  seq[a:b]  code starting from position  a  to position  b . We can also provide a third argument that determines\nthe step by which the slicing is done. The default step is  1  because of which it returns a continuous part of the\ntext. Giving a negative step, i.e.,  -1  will return the text in reverse.\nThe  input()  function takes a string as argument and displays it to the user. Then it waits for the user to type\nsomething and press the return key. Once the user has entered and pressed the return key, the  input()  function\nwill then return that text the user has entered.\nWe take that text and reverse it. If the original text and reversed text are equal, then the text is a palindrome.\nIntroduction\n88\nHomework exercise\nChecking whether a text is a palindrome should also ignore punctuation, spaces and case. For example, \"Rise to\nvote, sir.\" is also a palindrome but our current program doesn't say it is. Can you improve the above program to\nrecognize this palindrome?\nIf you need a hint, the idea is that...\nFiles\nYou can open and use files for reading or writing by creating an object of the  file  class and using its  read ,\n readline  or  write  methods appropriately to read from or write to the file. The ability to read or write to the file\ndepends on the mode you have specified for the file opening. Then finally, when you are finished with the file, you\ncall the  close  method to tell Python that we are done using the file.\nExample (save as  io_using_file.py ):\npoem = '''\\ \nProgramming is fun \nWhen the work is done \nif you wanna make your work also fun: \n    use Python! \n''' \n \n# Open for 'w'riting \nf = open('poem.txt', 'w') \n# Write text to file \nf.write(poem) \n# Close the file \nf.close() \n \n# If no mode is specified, \n# 'r'ead mode is assumed by default \nf = open('poem.txt') \nwhile True: \n    line = f.readline() \n    # Zero length indicates EOF \n    if len(line) == 0: \n        break \n    # The `line` already has a newline \n    # at the end of each line \n    # since it is reading from a file. \n    print(line, end='') \n# close the file \nf.close() \nOutput:\n$ python3 io_using_file.py \nProgramming is fun \nWhen the work is done \nif you wanna make your work also fun: \n    use Python! \nHow It Works\nNote that we can create a new file object simply by using the  open  method. We open (or create it if it doesn't\nalready exist) this file by using the built-in  open  function and specifying the name of the file and the mode in which\nwe want to open the file. The mode can be a read mode ( 'r' ), write mode ( 'w' ) or append mode ( 'a' ). We\n1\nIntroduction\n89\ncan also specify whether we are reading, writing, or appending in text mode ( 't' ) or binary mode ( 'b' ). There\nare actually many more modes available and  help(open)  will give you more details about them. By default,\n open()  considers the file to be a 't'ext file and opens it in 'r'ead mode.\nIn our example, we first open/create the file in write text mode and use the  write  method of the file object to write\nour string variable  poem  to the file and then we finally  close  the file.\nNext, we open the same file again for reading. We don't need to specify a mode because 'read text file' is the\ndefault mode. We read in each line of the file using the  readline  method in a loop. This method returns a complete\nline including the newline character at the end of the line. When an empty string is returned, it means that we have\nreached the end of the file and we 'break' out of the loop.\nIn the end, we finally  close  the file.\nWe can see from our  readline  output that this program has indeed written to and read from our new  poem.txt \nfile.\nPickle\nPython provides a standard module called  pickle  which you can use to store any plain Python object in a file and\nthen get it back later. This is called storing the object persistently.\nExample (save as  io_pickle.py ):\nimport pickle \n \n# The name of the file where we will store the object \nshoplistfile = 'shoplist.data' \n# The list of things to buy \nshoplist = ['apple', 'mango', 'carrot'] \n \n# Write to the file \nf = open(shoplistfile, 'wb') \n# Dump the object to a file \npickle.dump(shoplist, f) \nf.close() \n \n# Destroy the shoplist variable \ndel shoplist \n \n# Read back from the storage \nf = open(shoplistfile, 'rb') \n# Load the object from the file \nstoredlist = pickle.load(f) \nprint(storedlist) \nf.close() \nOutput:\n$ python io_pickle.py \n['apple', 'mango', 'carrot'] \nHow It Works\nTo store an object in a file, we have to first  open  the file in write binary mode and then call the  dump  function of\nthe  pickle  module. This process is called pickling.\nNext, we retrieve the object using the  load  function of the  pickle  module which returns the object. This process\nis called unpickling.\nIntroduction\n90\nUnicode\nSo far, when we have been writing and using strings, or reading and writing to a file, we have used simple English\ncharacters only. Both English and non-English characters can be represented in Unicode (please see the articles at\nthe end of this section for more info), and Python 3 by default stores string variables (think of all that text we wrote\nusing single or double or triple quotes) in Unicode.\nNOTE: If you are using Python 2, and we want to be able to read and write other non-English languages, we\nneed to use the  unicode  type, and it all starts with the character  u , e.g.  u\"hello world\" \n>>> \"hello world\" \n'hello world' \n>>> type(\"hello world\") \n<class 'str'> \n>>> u\"hello world\" \n'hello world' \n>>> type(u\"hello world\") \n<class 'str'> \nWhen data is sent over the Internet, we need to send it in bytes... something your computer easily understands.\nThe rules for translating Unicode (which is what Python uses when it stores a string) to bytes is called encoding. A\npopular encoding to use is UTF-8. We can read and write in UTF-8 by using a simple keyword argument in our\n open  function.\n# encoding=utf-8 \nimport io \n \nf = io.open(\"abc.txt\", \"wt\", encoding=\"utf-8\") \nf.write(u\"Imagine non-English language here\") \nf.close() \n \ntext = io.open(\"abc.txt\", encoding=\"utf-8\").read() \nprint(text) \nHow It Works\nWe use  io.open  and then use the  encoding  argument in the first open statement to encode the message, and\nthen again in the second open statement when decoding the message. Note that we should only use encoding in\nthe open statement when in text mode.\nWhenever we write a program that uses Unicode literals (by putting a  u  before the string) like we have used\nabove, we have to make sure that Python itself is told that our program uses UTF-8, and we have to put  #\nencoding=utf-8  comment at the top of our program.\nYou should learn more about this topic by reading:\n\"The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and\nCharacter Sets\"\nPython Unicode Howto\nPragmatic Unicode talk by Nat Batchelder\nSummary\nWe have discussed various types of input/output, about file handling, about the pickle module and about Unicode.\nNext, we will explore the concept of exceptions.\nIntroduction\n91\n. Use a tuple (you can find a list of all punctuation marks here) to hold all the forbidden characters, then use\nthe membership test to determine whether a character should be removed or not, i.e. forbidden = ( ! ,  ? ,\n . , ...). ↩\n1\nIntroduction\n92\nExceptions\nExceptions occur when exceptional situations occur in your program. For example, what if you are going to read a\nfile and the file does not exist? Or what if you accidentally deleted it when the program was running? Such\nsituations are handled using exceptions.\nSimilarly, what if your program had some invalid statements? This is handled by Python which raises its hands and\ntells you there is an error.\nErrors\nConsider a simple  print  function call. What if we misspelt  print  as  Print ? Note the capitalization. In this case,\nPython raises a syntax error.\n>>> Print(\"Hello World\") \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nNameError: name 'Print' is not defined \n>>> print(\"Hello World\") \nHello World \nObserve that a  NameError  is raised and also the location where the error was detected is printed. This is what an\nerror handler for this error does.\nExceptions\nWe will try to read input from the user. Enter the first line below and hit the  Enter  key. When your computer\nprompts you for input, instead press  [ctrl-d]  on a Mac or  [ctrl-z]  with Windows and see what happens. (If\nyou're using Windows and neither option works, you can try  [ctrl-c]  in the Command Prompt to generate a\nKeyboardInterrupt error instead).\n>>> s = input('Enter something --> ') \nEnter something --> Traceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nEOFError \nPython raises an error called  EOFError  which basically means it found an end of file symbol (which is represented\nby  ctrl-d ) when it did not expect to see it.\nHandling Exceptions\nWe can handle exceptions using the  try..except  statement. We basically put our usual statements within the try-\nblock and put all our error handlers in the except-block.\nExample (save as  exceptions_handle.py ):\nIntroduction\n93\ntry: \n    text = input('Enter something --> ') \nexcept EOFError: \n    print('Why did you do an EOF on me?') \nexcept KeyboardInterrupt: \n    print('You cancelled the operation.') \nelse: \n    print('You entered {}'.format(text)) \nOutput:\n# Press ctrl + d \n$ python exceptions_handle.py \nEnter something --> Why did you do an EOF on me? \n \n# Press ctrl + c \n$ python exceptions_handle.py \nEnter something --> ^CYou cancelled the operation. \n \n$ python exceptions_handle.py \nEnter something --> No exceptions \nYou entered No exceptions \nHow It Works\nWe put all the statements that might raise exceptions/errors inside the  try  block and then put handlers for the\nappropriate errors/exceptions in the  except  clause/block. The  except  clause can handle a single specified error\nor exception, or a parenthesized list of errors/exceptions. If no names of errors or exceptions are supplied, it will\nhandle all errors and exceptions.\nNote that there has to be at least one  except  clause associated with every  try  clause. Otherwise, what's the\npoint of having a try block?\nIf any error or exception is not handled, then the default Python handler is called which just stops the execution of\nthe program and prints an error message. We have already seen this in action above.\nYou can also have an  else  clause associated with a  try..except  block. The  else  clause is executed if no\nexception occurs.\nIn the next example, we will also see how to get the exception object so that we can retrieve additional information.\nRaising Exceptions\nYou can raise exceptions using the  raise  statement by providing the name of the error/exception and the\nexception object that is to be thrown.\nThe error or exception that you can raise should be a class which directly or indirectly must be a derived class of\nthe  Exception  class.\nExample (save as  exceptions_raise.py ):\nIntroduction\n94\nclass ShortInputException(Exception): \n    '''A user-defined exception class.''' \n    def __init__(self, length, atleast): \n        Exception.__init__(self) \n        self.length = length \n        self.atleast = atleast \n \ntry: \n    text = input('Enter something --> ') \n    if len(text) < 3:\n        raise ShortInputException(len(text), 3) \n    # Other work can continue as usual here \nexcept EOFError: \n    print('Why did you do an EOF on me?') \nexcept ShortInputException as ex: \n    print(('ShortInputException: The input was ' + \n           '{0} long, expected at least {1}') \n          .format(ex.length, ex.atleast)) \nelse: \n    print('No exception was raised.') \nOutput:\n$ python exceptions_raise.py \nEnter something --> a \nShortInputException: The input was 1 long, expected at least 3 \n \n$ python exceptions_raise.py \nEnter something --> abc \nNo exception was raised. \nHow It Works\nHere, we are creating our own exception type. This new exception type is called  ShortInputException . It has two\nfields -  length  which is the length of the given input, and  atleast  which is the minimum length that the program\nwas expecting.\nIn the  except  clause, we mention the class of error which will be stored  as  the variable name to hold the\ncorresponding error/exception object. This is analogous to parameters and arguments in a function call. Within this\nparticular  except  clause, we use the  length  and  atleast  fields of the exception object to print an appropriate\nmessage to the user.\nTry ... Finally\nSuppose you are reading a file in your program. How do you ensure that the file object is closed properly whether or\nnot an exception was raised? This can be done using the  finally  block.\nSave this program as  exceptions_finally.py :\nIntroduction\n95\nimport sys \nimport time \n \nf = None \ntry: \n    f = open(\"poem.txt\") \n    # Our usual file-reading idiom \n    while True: \n        line = f.readline() \n        if len(line) == 0: \n            break \n        print(line, end='') \n        sys.stdout.flush() \n        print(\"Press ctrl+c now\") \n        # To make sure it runs for a while \n        time.sleep(2) \nexcept IOError: \n    print(\"Could not find file poem.txt\") \nexcept KeyboardInterrupt: \n    print(\"!! You cancelled the reading from the file.\") \nfinally: \n    if f: \n        f.close() \n    print(\"(Cleaning up: Closed the file)\") \nOutput:\n$ python exceptions_finally.py \nProgramming is fun \nPress ctrl+c now \n^C!! You cancelled the reading from the file. \n(Cleaning up: Closed the file) \nHow It Works\nWe do the usual file-reading stuff, but we have arbitrarily introduced sleeping for 2 seconds after printing each line\nusing the  time.sleep  function so that the program runs slowly (Python is very fast by nature). When the program is\nstill running, press  ctrl + c  to interrupt/cancel the program.\nObserve that the  KeyboardInterrupt  exception is thrown and the program quits. However, before the program exits,\nthe finally clause is executed and the file object is always closed.\nNotice that a variable assigned a value of 0 or  None  or a variable which is an empty sequence or collection is\nconsidered  False  by Python. This is why we can use  if f:  in the code above.\nAlso note that we use  sys.stdout.flush()  after  print  so that it prints to the screen immediately.\nThe with statement\nAcquiring a resource in the  try  block and subsequently releasing the resource in the  finally  block is a common\npattern. Hence, there is also a  with  statement that enables this to be done in a clean manner:\nSave as  exceptions_using_with.py :\nwith open(\"poem.txt\") as f: \n    for line in f: \n        print(line, end='') \nHow It Works\nIntroduction\n96\nThe output should be same as the previous example. The difference here is that we are using the  open  function\nwith the  with  statement - we leave the closing of the file to be done automatically by  with open .\nWhat happens behind the scenes is that there is a protocol used by the  with  statement. It fetches the object\nreturned by the  open  statement, let's call it \"thefile\" in this case.\nIt always calls the  thefile.__enter__  function before starting the block of code under it and always calls\n thefile.__exit__  after finishing the block of code.\nSo the code that we would have written in a  finally  block should be taken care of automatically by the  __exit__ \nmethod. This is what helps us to avoid having to use explicit  try..finally  statements repeatedly.\nMore discussion on this topic is beyond scope of this book, so please refer PEP 343 for a comprehensive\nexplanation.\nSummary\nWe have discussed the usage of the  try..except  and  try..finally  statements. We have seen how to create our\nown exception types and how to raise exceptions as well.\nNext, we will explore the Python Standard Library.\nIntroduction\n97\nStandard Library\nThe Python Standard Library contains a huge number of useful modules and is part of every standard Python\ninstallation. It is important to become familiar with the Python Standard Library since many problems can be solved\nquickly if you are familiar with the range of things that these libraries can do.\nWe will explore some of the commonly used modules in this library. You can find complete details for all of the\nmodules in the Python Standard Library in the 'Library Reference' section of the documentation that comes with\nyour Python installation.\nLet us explore a few useful modules.\nCAUTION: If you find the topics in this chapter too advanced, you may skip this chapter. However, I highly\nrecommend coming back to this chapter when you are more comfortable with programming using Python.\n sys  module\nThe  sys  module contains system-specific functionality. We have already seen that the  sys.argv  list contains the\ncommand-line arguments.\nSuppose we want to check the version of the Python software being used, the  sys  module gives us that\ninformation.\n>>> import sys \n>>> sys.version_info \nsys.version_info(major=3, minor=6, micro=0, releaselevel='final', serial=0) \n>>> sys.version_info.major == 3 \nTrue \nHow It Works\nThe  sys  module has a  version_info  tuple that gives us the version information. The first entry is the major\nversion. We can pull out this information to use it.\n logging  module\nWhat if you wanted to have some debugging messages or important messages to be stored somewhere so that you\ncan check whether your program has been running as you would expect it? How do you \"store somewhere\" these\nmessages? This can be achieved using the  logging  module.\nSave as  stdlib_logging.py :\nIntroduction\n98\nimport os \nimport platform \nimport logging \n \nif platform.platform().startswith('Windows'): \n    logging_file = os.path.join(os.getenv('HOMEDRIVE'), \n                                os.getenv('HOMEPATH'), \n                                'test.log') \nelse: \n    logging_file = os.path.join(os.getenv('HOME'), \n                                'test.log') \n \nprint(\"Logging to\", logging_file) \n \nlogging.basicConfig( \n    level=logging.DEBUG, \n    format='%(asctime)s : %(levelname)s : %(message)s', \n    filename=logging_file, \n    filemode='w', \n) \n \nlogging.debug(\"Start of the program\") \nlogging.info(\"Doing something\") \nlogging.warning(\"Dying now\") \nOutput:\n$ python stdlib_logging.py \nLogging to /Users/swa/test.log \n \n$ cat /Users/swa/test.log \n2014-03-29 09:27:36,660 : DEBUG : Start of the program \n2014-03-29 09:27:36,660 : INFO : Doing something \n2014-03-29 09:27:36,660 : WARNING : Dying now \nThe  cat  command is used in the command line to read the 'test.log' file. If the  cat  command is not available, you\ncan open the  test.log  file in a text editor instead.\nHow It Works\nWe use three modules from the standard library - the  os  module for interacting with the operating system, the\n platform  module for information about the platform i.e. the operating system and the  logging  module to log\ninformation.\nFirst, we check which operating system we are using by checking the string returned by  platform.platform()  (for\nmore information, see  import platform; help(platform) ). If it is Windows, we figure out the home drive, the home\nfolder and the filename where we want to store the information. Putting these three parts together, we get the full\nlocation of the file. For other platforms, we need to know just the home folder of the user and we get the full location\nof the file.\nWe use the  os.path.join()  function to put these three parts of the location together. The reason to use a special\nfunction rather than just adding the strings together is because this function will ensure the full location matches the\nformat expected by the operating system. Note: the  join()  method we use here that's part of the  os  module is\ndifferent from the string method  join()  that we've used elsewhere in this book.\nWe configure the  logging  module to write all the messages in a particular format to the file we have specified.\nFinally, we can put messages that are either meant for debugging, information, warning or even critical messages.\nOnce the program has run, we can check this file and we will know what happened in the program, even though no\ninformation was displayed to the user running the program.\nIntroduction\n99\nModule of the Week Series\nThere is much more to be explored in the standard library such as debugging, handling command line options,\nregular expressions and so on.\nThe best way to further explore the standard library is to read Doug Hellmann's excellent Python Module of the\nWeek series (also available as a book) and reading the Python documentation.\nSummary\nWe have explored some of the functionality of many modules in the Python Standard Library. It is highly\nrecommended to browse through the Python Standard Library documentation to get an idea of all the modules that\nare available.\nNext, we will cover various aspects of Python that will make our tour of Python more complete.\nIntroduction\n100\nMore\nSo far we have covered a majority of the various aspects of Python that you will use. In this chapter, we will cover\nsome more aspects that will make our knowledge of Python more well-rounded.\nPassing tuples around\nEver wished you could return two different values from a function? You can. All you have to do is use a tuple.\n>>> def get_error_details(): \n...     return (2, 'details') \n... \n>>> errnum, errstr = get_error_details() \n>>> errnum \n2 \n>>> errstr \n'details' \nNotice that the usage of  a, b = <some expression>  interprets the result of the expression as a tuple with two\nvalues.\nThis also means the fastest way to swap two variables in Python is:\n>>> a = 5; b = 8 \n>>> a, b \n(5, 8) \n>>> a, b = b, a \n>>> a, b \n(8, 5) \nSpecial Methods\nThere are certain methods such as the  __init__  and  __del__  methods which have special significance in\nclasses.\nSpecial methods are used to mimic certain behaviors of built-in types. For example, if you want to use the  x[key] \nindexing operation for your class (just like you use it for lists and tuples), then all you have to do is implement the\n __getitem__()  method and your job is done. If you think about it, this is what Python does for the  list  class itself!\nSome useful special methods are listed in the following table. If you want to know about all the special methods,\nsee the manual.\n __init__(self, ...) \nThis method is called just before the newly created object is returned for usage.\n __del__(self) \nCalled just before the object is destroyed (which has unpredictable timing, so avoid using this)\n __str__(self) \nCalled when we use the  print  function or when  str()  is used.\n __lt__(self, other) \nIntroduction\n101\nCalled when the less than operator (<) is used. Similarly, there are special methods for all the operators (+,\n>, etc.)\n __getitem__(self, key) \nCalled when  x[key]  indexing operation is used.\n __len__(self) \nCalled when the built-in  len()  function is used for the sequence object.\nSingle Statement Blocks\nWe have seen that each block of statements is set apart from the rest by its own indentation level. Well, there is one\ncaveat. If your block of statements contains only one single statement, then you can specify it on the same line of,\nsay, a conditional statement or looping statement. The following example should make this clear:\n>>> flag = True \n>>> if flag: print('Yes') \n... \nYes \nNotice that the single statement is used in-place and not as a separate block. Although, you can use this for making\nyour program smaller, I strongly recommend avoiding this short-cut method, except for error checking, mainly\nbecause it will be much easier to add an extra statement if you are using proper indentation.\nLambda Forms\nA  lambda  statement is used to create new function objects. Essentially, the  lambda  takes a parameter followed by\na single expression. Lambda becomes the body of the function. The value of this expression is returned by the new\nfunction.\nExample (save as  more_lambda.py ):\npoints = [{'x': 2, 'y': 3}, \n          {'x': 4, 'y': 1}] \npoints.sort(key=lambda i: i['y']) \nprint(points) \nOutput:\n$ python more_lambda.py \n[{'y': 1, 'x': 4}, {'y': 3, 'x': 2}] \nHow It Works\nNotice that the  sort  method of a  list  can take a  key  parameter which determines how the list is sorted\n(usually we know only about ascending or descending order). In our case, we want to do a custom sort, and for that\nwe need to write a function. Instead of writing a separate  def  block for a function that will get used in only this one\nplace, we use a lambda expression to create a new function.\nList Comprehension\nIntroduction\n102\nList comprehensions are used to derive a new list from an existing list. Suppose you have a list of numbers and you\nwant to get a corresponding list with all the numbers multiplied by 2 only when the number itself is greater than 2.\nList comprehensions are ideal for such situations.\nExample (save as  more_list_comprehension.py ):\nlistone = [2, 3, 4] \nlisttwo = [2*i for i in listone if i > 2] \nprint(listtwo) \nOutput:\n$ python more_list_comprehension.py \n[6, 8] \nHow It Works\nHere, we derive a new list by specifying the manipulation to be done ( 2*i ) when some condition is satisfied ( if i\n> 2 ). Note that the original list remains unmodified.\nThe advantage of using list comprehensions is that it reduces the amount of boilerplate code required when we use\nloops to process each element of a list and store it in a new list.\nReceiving Tuples and Dictionaries in Functions\nThere is a special way of receiving parameters to a function as a tuple or a dictionary using the  *  or  **  prefix\nrespectively. This is useful when taking variable number of arguments in the function.\n>>> def powersum(power, *args): \n...     '''Return the sum of each argument raised to the specified power.''' \n...     total = 0 \n...     for i in args: \n...         total += pow(i, power) \n...     return total \n... \n>>> powersum(2, 3, 4)\n25 \n>>> powersum(2, 10) \n100 \nBecause we have a  *  prefix on the  args  variable, all extra arguments passed to the function are stored in  args \nas a tuple. If a  **  prefix had been used instead, the extra parameters would be considered to be key/value pairs\nof a dictionary.\nThe assert statement\nThe  assert  statement is used to assert that something is true. For example, if you are very sure that you will have\nat least one element in a list you are using and want to check this, and raise an error if it is not true, then  assert \nstatement is ideal in this situation. When the assert statement fails, an  AssertionError  is raised. The  pop() \nmethod removes and returns the last item from the list.\nIntroduction\n103\n>>> mylist = ['item'] \n>>> assert len(mylist) >= 1 \n>>> mylist.pop() \n'item' \n>>> assert len(mylist) >= 1 \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nAssertionError \nThe  assert  statement should be used judiciously. Most of the time, it is better to catch exceptions, either handle\nthe problem or display an error message to the user and then quit.\nDecorators\nDecorators are a shortcut to applying wrapper functions. This is helpful to \"wrap\" functionality with the same code\nover and over again. For example, I created a  retry  decorator for myself that I can just apply to any function and if\nany exception is thrown during a run, it is retried again, till a maximum of 5 times and with a delay between each\nretry. This is especially useful for situations where you are trying to make a network call to a remote computer:\nfrom time import sleep \nfrom functools import wraps \nimport logging \nlogging.basicConfig() \nlog = logging.getLogger(\"retry\") \n \n \ndef retry(f): \n    @wraps(f) \n    def wrapper_function(*args, **kwargs): \n        MAX_ATTEMPTS = 5 \n        for attempt in range(1, MAX_ATTEMPTS + 1): \n            try: \n                return f(*args, **kwargs) \n            except Exception: \n                log.exception(\"Attempt %s/%s failed : %s\", \n                              attempt, \n                              MAX_ATTEMPTS, \n                              (args, kwargs)) \n                sleep(10 * attempt) \n        log.critical(\"All %s attempts failed : %s\", \n                     MAX_ATTEMPTS, \n                     (args, kwargs)) \n    return wrapper_function \n \n \ncounter = 0 \n \n \n@retry \ndef save_to_database(arg): \n    print(\"Write to a database or make a network call or etc.\") \n    print(\"This will be automatically retried if exception is thrown.\") \n    global counter \n    counter += 1 \n    # This will throw an exception in the first call \n    # And will work fine in the second call (i.e. a retry) \n    if counter < 2: \n        raise ValueError(arg) \n \n \nif __name__ == '__main__': \n    save_to_database(\"Some bad value\") \nIntroduction\n104\nOutput:\n$ python more_decorator.py \nWrite to a database or make a network call or etc. \nThis will be automatically retried if exception is thrown. \nERROR:retry:Attempt 1/5 failed : (('Some bad value',), {}) \nTraceback (most recent call last): \n  File \"more_decorator.py\", line 14, in wrapper_function \n    return f(*args, **kwargs) \n  File \"more_decorator.py\", line 39, in save_to_database \n    raise ValueError(arg) \nValueError: Some bad value \nWrite to a database or make a network call or etc. \nThis will be automatically retried if exception is thrown. \nHow It Works\nSee:\nVideo : Python Decorators Made Easy\nhttp://www.ibm.com/developerworks/linux/library/l-cpdecor.html\nhttp://toumorokoshi.github.io/dry-principles-through-python-decorators.html\nDifferences between Python 2 and Python 3\nSee:\n\"Six\" library\nPorting to Python 3 Redux by Armin\nPython 3 experience by PyDanny\nOfficial Django Guide to Porting to Python 3\nDiscussion on What are the advantages to python 3.x?\nSummary\nWe have covered some more features of Python in this chapter and yet we haven't covered all the features of\nPython. However, at this stage, we have covered most of what you are ever going to use in practice. This is\nsufficient for you to get started with whatever programs you are going to create.\nNext, we will discuss how to explore Python further.\nIntroduction\n105\nWhat Next\nIf you have read this book thoroughly till now and practiced writing a lot of programs, then you must have become\ncomfortable and familiar with Python. You have probably created some Python programs to try out stuff and to\nexercise your Python skills as well. If you have not done it already, you should. The question now is 'What Next?'.\nI would suggest that you tackle this problem:\nCreate your own command-line address-book program using which you can browse, add, modify, delete or\nsearch for your contacts such as friends, family and colleagues and their information such as email address\nand/or phone number. Details must be stored for later retrieval.\nThis is fairly easy if you think about it in terms of all the various stuff that we have come across till now. If you still\nwant directions on how to proceed, then here's a hint .\nOnce you are able to do this, you can claim to be a Python programmer. Now, immediately send me an email\nthanking me for this great book ;-). This step is optional but recommended. Also, please consider buying a printed\ncopy to support the continued development of this book.\nIf you found that program easy, here's another one:\nImplement the replace command. This command will replace one string with another in the list of files\nprovided.\nThe replace command can be as simple or as sophisticated as you wish, from simple string substitution to looking\nfor patterns (regular expressions).\nNext Projects\nIf you found above programs easy to create, then look at this comprehensive list of projects and try writing your own\nprograms: https://github.com/thekarangoel/Projects#numbers (the same list is also at Martyr2's Mega Project List).\nAlso see:\nExercises for Programmers: 57 Challenges to Develop Your Coding Skills\nIntermediate Python Projects.\nExample Code\nThe best way to learn a programming language is to write a lot of code and read a lot of code:\nPython Cookbook is an extremely valuable collection of recipes or tips on how to solve certain kinds of\nproblems using Python. This is a must-read for every Python user.\nPython Module of the Week is another excellent must-read guide to the Standard Library.\nAdvice\nThe Hitchhiker's Guide to Python!\nThe Elements of Python Style\nPython Big Picture\n\"Writing Idiomatic Python\" ebook (paid)\n1\nIntroduction\n106\nVideos\nFull Stack Web Development with Flask\nPyVideo\nQuestions and Answers\nOfficial Python Dos and Don'ts\nOfficial Python FAQ\nNorvig's list of Infrequently Asked Questions\nPython Interview Q & A\nStackOverflow questions tagged with python\nTutorials\nHidden features of Python\nWhat's the one code snippet/python trick/etc did you wish you knew when you learned python?\nAwaretek's comprehensive list of Python tutorials\nDiscussion\nIf you are stuck with a Python problem, and don't know whom to ask, then the python-tutor list is the best place to\nask your question.\nMake sure you do your homework by trying to solving the problem yourself first and ask smart questions.\nNews\nIf you want to learn what is the latest in the world of Python, then follow the Official Python Planet.\nInstalling libraries\nThere are a huge number of open source libraries at the Python Package Index which you can use in your own\nprograms.\nTo install and use these libraries, you can use pip.\nCreating a Website\nLearn Flask to create your own website. Some resources to get started:\nFlask Official Quickstart\nThe Flask Mega-Tutorial\nExample Flask Projects\nGraphical Software\nIntroduction\n107\nSuppose you want to create your own graphical programs using Python. This can be done using a GUI (Graphical\nUser Interface) library with their Python bindings. Bindings are what allow you to write programs in Python and use\nthe libraries which are themselves written in C or C++ or other languages.\nThere are lots of choices for GUI using Python:\nKivy\nhttp://kivy.org\nPyGTK\nThis is the Python binding for the GTK+ toolkit which is the foundation upon which GNOME is built. GTK+\nhas many quirks in usage but once you become comfortable, you can create GUI apps fast. The Glade\ngraphical interface designer is indispensable. The documentation is yet to improve. GTK+ works well on\nGNU/Linux but its port to Windows is incomplete. You can create both free as well as proprietary software\nusing GTK+. To get started, read the PyGTK tutorial.\nPyQt\nThis is the Python binding for the Qt toolkit which is the foundation upon which the KDE is built. Qt is\nextremely easy to use and very powerful especially due to the Qt Designer and the amazing Qt\ndocumentation. PyQt is free if you want to create open source (GPL'ed) software and you need to buy it if\nyou want to create proprietary closed source software. Starting with Qt 4.5 you can use it to create non-\nGPL software as well. To get started, read about PySide.\nwxPython\nThis is the Python bindings for the wxWidgets toolkit. wxPython has a learning curve associated with it.\nHowever, it is very portable and runs on GNU/Linux, Windows, Mac and even embedded platforms. There\nare many IDEs available for wxPython which include GUI designers as well such as SPE (Stani's Python\nEditor) and the wxGlade GUI builder. You can create free as well as proprietary software using wxPython.\nTo get started, read the wxPython tutorial.\nSummary of GUI Tools\nFor more choices, see the GuiProgramming wiki page at the official python website.\nUnfortunately, there is no one standard GUI tool for Python. I suggest that you choose one of the above tools\ndepending on your situation. The first factor is whether you are willing to pay to use any of the GUI tools. The\nsecond factor is whether you want the program to run only on Windows or on Mac and GNU/Linux or all of them.\nThe third factor, if GNU/Linux is a chosen platform, is whether you are a KDE or GNOME user on GNU/Linux.\nFor a more detailed and comprehensive analysis, see Page 26 of the 'The Python Papers, Volume 3, Issue 1'\n(PDF).\nVarious Implementations\nThere are usually two parts a programming language - the language and the software. A language is how you write\nsomething. The software is what actually runs our programs.\nWe have been using the CPython software to run our programs. It is referred to as CPython because it is written in\nthe C language and is the Classical Python interpreter.\nThere are also other software that can run your Python programs:\nJython\nIntroduction\n108\nA Python implementation that runs on the Java platform. This means you can use Java libraries and\nclasses from within Python language and vice-versa.\nIronPython\nA Python implementation that runs on the .NET platform. This means you can use .NET libraries and\nclasses from within Python language and vice-versa.\nPyPy\nA Python implementation written in Python! This is a research project to make it fast and easy to improve\nthe interpreter since the interpreter itself is written in a dynamic language (as opposed to static languages\nsuch as C, Java or C# in the above three implementations)\nThere are also others such as CLPython - a Python implementation written in Common Lisp and Brython which is\nan implementation on top of a JavaScript interpreter which could mean that you can use Python (instead of\nJavaScript) to write your web-browser (\"Ajax\") programs.\nEach of these implementations have their specialized areas where they are useful.\nFunctional Programming (for advanced readers)\nWhen you start writing larger programs, you should definitely learn more about a functional approach to\nprogramming as opposed to the class-based approach to programming that we learned in the object-oriented\nprogramming chapter:\nFunctional Programming Howto by A.M. Kuchling\nFunctional programming chapter in 'Dive Into Python' book\nFunctional Programming with Python presentation\nFuncy library\nPyToolz library\nSummary\nWe have now come to the end of this book but, as they say, this is the the beginning of the end!. You are now an\navid Python user and you are no doubt ready to solve many problems using Python. You can start automating your\ncomputer to do all kinds of previously unimaginable things or write your own games and much much more. So, get\nstarted!\n. Create a class to represent the person's information. Use a dictionary to store person objects with their\nname as the key. Use the pickle module to store the objects persistently on your hard disk. Use the dictionary\nbuilt-in methods to add, delete and modify the persons. ↩\n1\nIntroduction\n109\nAppendix: FLOSS\nNOTE: Please note that this section was written in 2003, so some of this will sound quaint to you :-)\n\"Free/Libre and Open Source Software\", in short, FLOSS is based on the concept of a community, which itself is\nbased on the concept of sharing, and particularly the sharing of knowledge. FLOSS are free for usage, modification\nand redistribution.\nIf you have already read this book, then you are already familiar with FLOSS since you have been using Python all\nalong and Python is an open source software!\nHere are some examples of FLOSS to give an idea of the kind of things that community sharing and building can\ncreate:\nLinux: This is a FLOSS OS kernel used in the GNU/Linux operating system. Linux, the kernel, was started by Linus\nTorvalds as a student. Android is based on Linux. Any website you use these days will mostly be running on Linux.\nUbuntu: This is a community-driven distribution, sponsored by Canonical and it is the most popular GNU/Linux\ndistribution today. It allows you to install a plethora of FLOSS available and all this in an easy-to-use and easy-to-\ninstall manner. Best of all, you can just reboot your computer and run GNU/Linux off the CD! This allows you to\ncompletely try out the new OS before installing it on your computer. However, Ubuntu is not entirely free software; it\ncontains proprietary drivers, firmware, and applications.\nLibreOffice: This is an excellent community-driven and developed office suite with a writer, presentation,\nspreadsheet and drawing components among other things. It can even open and edit MS Word and MS PowerPoint\nfiles with ease. It runs on almost all platforms and is entirely free, libre and open source software.\nMozilla Firefox: This is the best web browser. It is blazingly fast and has gained critical acclaim for its sensible and\nimpressive features. The extensions concept allows any kind of plugins to be used.\nMono: This is an open source implementation of the Microsoft .NET platform. It allows .NET applications to be\ncreated and run on GNU/Linux, Windows, FreeBSD, Mac OS and many other platforms as well.\nApache web server: This is the popular open source web server. In fact, it is the most popular web server on the\nplanet! It runs nearly more than half of the websites out there. Yes, that's right - Apache handles more websites\nthan all the competition (including Microsoft IIS) combined.\nVLC Player: This is a video player that can play anything from DivX to MP3 to Ogg to VCDs and DVDs to ... who\nsays open source ain't fun? ;-)\nThis list is just intended to give you a brief idea - there are many more excellent FLOSS out there, such as the Perl\nlanguage, PHP language, Drupal content management system for websites, PostgreSQL database server, TORCS\nracing game, KDevelop IDE, Xine - the movie player, VIM editor, Quanta+ editor, Banshee audio player, GIMP\nimage editing program, ... This list could go on forever.\nTo get the latest buzz in the FLOSS world, check out the following websites:\nOMG! Ubuntu!\nWeb Upd8\nDistroWatch\nPlanet Debian\nVisit the following websites for more information on FLOSS:\nGitHub Explore\nCode Triage\nIntroduction\n110\nSourceForge\nFreshMeat\nSo, go ahead and explore the vast, free and open world of FLOSS!\nIntroduction\n111\nAppendix: Colophon\nAlmost all of the software that I have used in the creation of this book are FLOSS.\nBirth of the Book\nIn the first draft of this book, I had used Red Hat 9.0 Linux as the foundation of my setup and in the sixth draft, I\nused Fedora Core 3 Linux as the basis of my setup.\nInitially, I was using KWord to write the book (as explained in the history lesson).\nTeenage Years\nLater, I switched to DocBook XML using Kate but I found it too tedious. So, I switched to OpenOffice which was just\nexcellent with the level of control it provided for formatting as well as the PDF generation, but it produced very\nsloppy HTML from the document.\nFinally, I discovered XEmacs and I rewrote the book from scratch in DocBook XML (again) after I decided that this\nformat was the long term solution.\nIn the sixth draft, I decided to use Quanta+ to do all the editing. The standard XSL stylesheets that came with\nFedora Core 3 Linux were being used. However, I had written a CSS document to give color and style to the HTML\npages. I had also written a crude lexical analyzer, in Python of course, which automatically provides syntax\nhighlighting to all the program listings.\nFor the seventh draft, I was using MediaWiki as the basis of my setup. I used to edit everything online and the\nreaders can directly read/edit/discuss within the wiki website, but I ended up spending more time fighting spam than\nwriting.\nFor the eight draft, I used Vim, Pandoc, and Mac OS X.\nFor the ninth draft, I switched to AsciiDoc format and used Emacs 24.3, tomorrow theme, Fira Mono font and adoc-\nmode to write.\nNow\n2016: I got tired of several minor rendering issues in AsciiDoctor, like the  ++  in  C/C++  would disappear and it was\nhard to keep track of escaping such minor things. Plus, I had become reluctant to edit the text because of the\ncomplex Asciidoc format.\nFor the tenth draft, I switched to writing in Markdown + GitBook format, using the Spacemacs editor.\nNov 2020: Since Gitbook abandoned their open source software, migrated to Honkit, a community-maintained fork\nof Gitbook legacy.\nAbout the Author\nSee https://swaroopch.com/about/\nIntroduction\n112\nAppendix: History Lesson\nI first started with Python when I needed to write an installer for software I had written called 'Diamond' so that I\ncould make the installation easy. I had to choose between Python and Perl bindings for the Qt library. I did some\nresearch on the web and I came across an article by Eric S. Raymond, a famous and respected hacker, where he\ntalked about how Python had become his favorite programming language. I also found out that the PyQt bindings\nwere more mature compared to Perl-Qt. So, I decided that Python was the language for me.\nThen, I started searching for a good book on Python. I couldn't find any! I did find some O'Reilly books but they\nwere either too expensive or were more like a reference manual than a guide. So, I settled for the documentation\nthat came with Python. However, it was too brief and small. It did give a good idea about Python but was not\ncomplete. I managed with it since I had previous programming experience, but it was unsuitable for newbies.\nAbout six months after my first brush with Python, I installed the (then) latest Red Hat 9.0 Linux and I was playing\naround with KWord. I got excited about it and suddenly got the idea of writing some stuff on Python. I started writing\na few pages but it quickly became 30 pages long. Then, I became serious about making it more useful in a book\nform. After a lot of rewrites, it has reached a stage where it has become a useful guide to learning the Python\nlanguage. I consider this book to be my contribution and tribute to the open source community.\nThis book started out as my personal notes on Python and I still consider it in the same way, although I've taken a\nlot of effort to make it more palatable to others :)\nIn the true spirit of open source, I have received lots of constructive suggestions, criticisms and feedback from\nenthusiastic readers which has helped me improve this book a lot.\nStatus Of The Book\nThe book needs the help of its readers such as yourselves to point out any parts of the book which are not good,\nnot comprehensible or are simply wrong. Please write to the main author or the respective translators with your\ncomments and suggestions.\nAppendix: Revision History\nNo version change\n06 Nov 2020\nMigrated from abandoned GitBook to community-maintained Honkit, a fork of GitBook legacy\n4.0\n19 Jan 2016\nSwitched back to Python 3\nSwitched back to Markdown, using GitBook and Spacemacs\n3.0\n31 Mar 2014\nRewritten for Python 2 using AsciiDoc and adoc-mode.\n2.1\n03 Aug 2013\nRewritten using Markdown and Jason Blevins' Markdown Mode\n2.0\nIntroduction\n113\n20 Oct 2012\nRewritten in Pandoc format, thanks to my wife who did most of the conversion from the Mediawiki format\nSimplifying text, removing non-essential sections such as  nonlocal  and metaclasses\n1.90\n04 Sep 2008 and still in progress\nRevival after a gap of 3.5 years!\nRewriting for Python 3.0\nRewrite using MediaWiki (again)\n1.20\n13 Jan 2005\nComplete rewrite using Quanta+ on Fedora Core 3 with lot of corrections and updates. Many new\nexamples. Rewrote my DocBook setup from scratch.\n1.15\n28 Mar 2004\nMinor revisions\n1.12\n16 Mar 2004\nAdditions and corrections\n1.10\n09 Mar 2004\nMore typo corrections, thanks to many enthusiastic and helpful readers.\n1.00\n08 Mar 2004\nAfter tremendous feedback and suggestions from readers, I have made significant revisions to the content\nalong with typo corrections.\n0.99\n22 Feb 2004\nAdded a new chapter on modules. Added details about variable number of arguments in functions.\n0.98\n16 Feb 2004\nWrote a Python script and CSS stylesheet to improve XHTML output, including a crude-yet-functional\nlexical analyzer for automatic VIM-like syntax highlighting of the program listings.\n0.97\n13 Feb 2004\nAnother completely rewritten draft, in DocBook XML (again). Book has improved a lot - it is more coherent\nand readable.\n0.93\n25 Jan 2004\nAdded IDLE talk and more Windows-specific stuff\n0.92\n05 Jan 2004\nChanges to few examples.\n0.91\n30 Dec 2003\nCorrected typos. Improvised many topics.\nIntroduction\n114\n0.90\n18 Dec 2003\nAdded 2 more chapters. OpenOffice format with revisions.\n0.60\n21 Nov 2003\nFully rewritten and expanded.\n0.20\n20 Nov 2003\nCorrected some typos and errors.\n0.15\n20 Nov 2003\nConverted to DocBook XML with XEmacs.\n0.10\n14 Nov 2003\nInitial draft using KWord.\nIntroduction\n115\nTranslations\nThere are many translations of the book available in different human languages, thanks to many tireless volunteers!\nIf you want to help with these translations, please see the list of volunteers and languages below and decide if you\nwant to start a new translation or help in existing translation projects.\nIf you plan to start a new translation, please read the Translation how-to.\nArabic\nBelow is the link for the Arabic version. Thanks to Ashraf Ali Khalaf for translating the book, you can read the whole\nbook online at http://www.khaledhosny.org/byte-of-python/index.html or you can download it from sourceforge.net\nfor more info see http://itwadi.com/byteofpython_arabi.\nAzerbaijani\nJahangir Shabiyev (c.shabiev@gmail.com) has volunteered to translate the book to Azerbaijani. The translation is\nin progress at https://www.gitbook.com/book/jahangir-sh/piton-sancmasi\nBrazilian Portuguese\nThere are two translations in various levels of completion and accessibility. The older translation is now\nmissing/lost, and newer translation is incomplete.\nSamuel Dias Neto (samuel.arataca@gmail.com) made the first Brazilian Portuguese translation (older translation)\nof this book when Python was in 2.3.5 version. This is no longer publicly accessible.\nRodrigo Amaral (rodrigoamaral@gmail.com) has volunteered to translate the book to Brazilian Portuguese, (newer\ntranslation) which still remains to be completed.\nCatalan\nMoises Gomez (moisesgomezgiron@gmail.com) has volunteered to translate the book to Catalan. The translation\nis in progress.\nMoisès Gómez - I am a developer and also a teacher of programming (normally for people without any\nprevious experience).\nSome time ago I needed to learn how to program in Python, and Swaroop's work was really helpful. Clear,\nconcise, and complete enough. Just what I needed.\nAfter this experience, I thought some other people in my country could take benefit from it too. But English\nlanguage can be a barrier.\nSo, why not try to translate it? And I did for a previous version of BoP.\nI my country there are two official languages. I selected the Catalan language assuming that others will\ntranslate it to the more widespread Spanish.\nIntroduction\n116\nChinese\nIn 2017 which is after 11 years, Mo Lun (i@molun.net) re-translated the book from the beginning based on Version\n4.0. And the translation is storaged in GitHub and Gitbook. He is keeping follow this translated edition and ready to\nfix it if there is any wrong or mistake in the translated BoP.\nThe 2017 translation edition is available in https://bop.molun.net.\nMo Lun Says:\nI am a common journalism student from CYU, Beijing. And actually, I am an absolute newbie in Python\nprogramming when I start to translate this book. Initially, it was just a whim, but when I done this work, I\nrealized that a decision triggered by interest had prompted me to go so far.\nWith the help of my predecessors’ translations and the vast amount of information provided by the developed\nInternet, and with the help of my friends, I prudently presented this translation edition. I just hope my\ntranslation work will help other newcomers in learning Python.\nAt the same time, I am always waiting for my translation of the comments and suggestions, and ready to\nchange or improve this superficial work.\nEarlier Chinese translation\nIn 2005, Shen Jieyuan translated this book with version 1.20 to Chinese and published it to the Internet. This is the\nfirst Chinese edition. In BoP official site, he was called Juan Shen, with Email adderss orion_val@163.comThis\nedition has been disseminated on the network widely, and the links provided by BoP official site are not available\nanymore, so that its original source is unable to find. Therefore in here can’t provide a certain address. But you can\ntry to search keywords like “Python ” to find a copy.\nJuan Shen says:\nI am a postgraduate at Wireless Telecommunication Graduate School, Beijing University of Technology,\nChina PR. My current research interest is on the synchronization, channel estimation and multi-user\ndetection of multicarrier CDMA system. Python is my major programming language for daily simulation and\nresearch job, with the help of Python Numeric, actually. I learned Python just half a year before, but as you\ncan see, it's really easy-understanding, easy-to-use and productive. Just as what is ensured in Swaroop's\nbook, 'It's my favorite programming language now'.\n'A Byte of Python' is my tutorial to learn Python. It's clear and effective to lead you into a world of Python in\nthe shortest time. It's not too long, but efficiently covers almost all important things in Python. I think 'A Byte of\nPython' should be strongly recommendable for newbies as their first Python tutorial. Just dedicate my\ntranslation to the potential millions of Python users in China.\nChinese Traditional\nFred Lin (gasolin@gmail.com) has volunteered to translate the book to Chinese Traditional.\nIt is available at http://code.google.com/p/zhpy/wiki/ByteOfZhpy.\nAn exciting feature of this translation is that it also contains the executable chinese python sources side by side with\nthe original python sources.\nIntroduction\n117\nFred Lin - I'm working as a network firmware engineer at Delta Network, and I'm also a contributor of\nTurboGears web framework.\nAs a python evangelist (:-p), I need some material to promote python language. I found 'A Byte of Python' hit\nthe sweet point for both newbies and experienced programmers. 'A Byte of Python' elaborates the python\nessentials with affordable size.\nThe translation are originally based on simplified chinese version, and soon a lot of rewrite were made to fit\nthe current wiki version and the quality of reading.\nThe recent chinese traditional version also featured with executable chinese python sources, which are\nachieved by my new 'zhpy' (python in chinese) project (launch from Aug 07).\nzhpy(pronounce (Z.H.?, or zippy) build a layer upon python to translate or interact with python in\nchinese(Traditional or Simplified). This project is mainly aimed for education.\nFrench\nGregory (coulix@ozforces.com.au) has volunteered to translate the book to French.\nGérard Labadie (gerard.labadie@gmail.com) has completed to translate the book to French.\nThis translation was later ported to the markdown format, updated to match the last version of the book, and\npublished on GitBook by Romain Gilliotte (rgilliotte@gmail.com).\nIt can be found at https://rgilliotte.gitbook.io/byte-of-python/\nGerman\nLutz Horn (lutz.horn@gmx.de), Bernd Hengelein (bernd.hengelein@gmail.com) and Christoph Zwerschke\n(cito@online.de) have volunteered to translate the book to German.\nTranslation can be found at http://cito.github.io/byte_of_python/\nLutz Horn says:\nI'm 32 years old and have a degree of Mathematics from University of Heidelberg, Germany. Currently I'm\nworking as a software engineer on a publicly funded project to build a web portal for all things related to\ncomputer science in Germany.The main language I use as a professional is Java, but I try to do as much as\npossible with Python behind the scenes. Especially text analysis and conversion is very easy with Python. I'm\nnot very familiar with GUI toolkits, since most of my programming is about web applications, where the user\ninterface is build using Java frameworks like Struts. Currently I try to make more use of the functional\nprogramming features of Python and of generators. After taking a short look into Ruby, I was very impressed\nwith the use of blocks in this language. Generally I like the dynamic nature of languages like Python and\nRuby since it allows me to do things not possible in more static languages like Java.I've searched for some\nkind of introduction to programming, suitable to teach a complete non-programmer. I've found the book 'How\nto Think Like a Computer Scientist: Learning with Python', and 'Dive into Python'. The first is good for\nbeginners but to long to translate. The second is not suitable for beginners. I think 'A Byte of Python' falls\nnicely between these, since it is not too long, written to the point, and at the same time verbose enough to\nteach a newbie. Besides this, I like the simple DocBook structure, which makes translating the text a\ngeneration the output in various formats a charm.\nBernd Hengelein says:\nIntroduction\n118\nLutz and me are going to do the german translation together. We just started with the intro and preface but\nwe will keep you informed about the progress we make. Ok, now some personal things about me. I am 34\nyears old and playing with computers since the 1980's, when the \"Commodore C64\" ruled the nurseries. After\nstudying computer science I started working as a software engineer. Currently I am working in the field of\nmedical imaging for a major german company. Although C++ is the main language I (have to) use for my\ndaily work, I am constantly looking for new things to learn.Last year I fell in love with Python, which is a\nwonderful language, both for its possibilities and its beauty. I read somewhere in the net about a guy who\nsaid that he likes python, because the code looks so beautiful. In my opinion he's absolutly right. At the time I\ndecided to learn python, I noticed that there is very little good documentation in german available. When I\ncame across your book the spontaneous idea of a german translation crossed my mind. Luckily, Lutz had the\nsame idea and we can now divide the work.I am looking forward to a good cooperation!\nGreek\nThe Greek Ubuntu Community translated the book in Greek, for use in our on-line asynchronous Python lessons\nthat take place in our forums. Contact @savvasradevic for more information.\nIndonesian\nDaniel (daniel.mirror@gmail.com) is translating the book to Indonesian at http://python.or.id/moin.cgi/ByteofPython.\nWisnu Priyambodo (cibermen@gmail.com) also has volunteered to translate the book to Indonesian.\nAlso, Bagus Aji Santoso (baguzzzaji@gmail.com) has volunteered.\nItalian (first)\nEnrico Morelli (mr.mlucci@gmail.com) and Massimo Lucci (morelli@cerm.unifi.it) have volunteered to translate the\nbook to Italian.\nThe Italian translation is present at http://www.gentoo.it/Programmazione/byteofpython.\nMassimo Lucci and Enrico Morelli - we are working at the University of Florence (Italy) - Chemistry\nDepartment. I (Massimo) as service engineer and system administrator for Nuclear Magnetic Resonance\nSpectrometers; Enrico as service engineer and system administrator for our CED and parallel / clustered\nsystems. We are programming on python since about seven years, we had experience working with Linux\nplatforms since ten years. In Italy we are responsible and administrator for www.gentoo.it web site for\nGentoo/Linux distrubution and www.nmr.it (now under construction) for Nuclear Magnetic Resonance\napplications and Congress Organization and Managements.That's all! We are impressed by the smart\nlanguage used on your Book and we think this is essential for approaching the Python to new users (we are\nthinking about hundred of students and researcher working on our labs).\nItalian (second)\nAn Italian translation has been created by Calvina Bice & colleagues at http://besthcgdropswebsite.com/translate/a-\nbyte-of-python/.\nJapanese\nIntroduction\n119\nShunro Dozono (dozono@gmail.com) is translating the book to Japanese.\nKorean\nEpsimatt (2019)\nEpsimatt has started a new Korean translation:\nRead online at https://epsimatt.gitbook.io/byte-of-python/\nFollow progress at https://github.com/epsimatt/byte-of-python/issues/16\nOlder\nJeongbin Park (pjb7687@gmail.com) has translated the book to Korean -\nhttps://github.com/pjb7687/byte_of_python\nI am Jeongbin Park, currently working as a Biophysics & Bioinformatics researcher in Korea.\nA year ago, I was looking for a good tutorial/guide for Python to introduce it to my colleagues, because using\nPython in such research fields is becoming inevitable due to the user base is growing more and more.\nBut at that time only few Python books are available in Korean, so I decided to translate your ebook because\nit looks like one of the best guides that I have ever read!\nCurrently, the book is almost completely translated in Korean, except some of the text in introduction chapter\nand the appendixes.\nThank you again for writing such a good guide!\nMongolian\nAriunsanaa Tunjin (luftballons2010@gmail.com) has volunteered to translate the book to Mongolian.\nUpdate on Nov 22, 2009 : Ariunsanaa is on the verge of completing the translation.\nNorwegian (bokmål)\nEirik Vågeskar is a high school student at Sandvika videregående skole in Norway, a blogger and currently\ntranslating the book to Norwegian (bokmål).\nEirik Vågeskar: I have always wanted to program, but because I speak a small language, the learning\nprocess was much harder. Most tutorials and books are written in very technical English, so most high school\ngraduates will not even have the vocabulary to understand what the tutorial is about. When I discovered this\nbook, all my problems were solved. \"A Byte of Python\" used simple non-technical language to explain a\nprogramming language that is just as simple, and these two things make learning Python fun. After reading\nhalf of the book, I decided that the book was worth translating. I hope the translation will help people who\nhave found themself in the same situation as me (especially young people), and maybe help spread interest\nfor the language among people with less technical knowledge.\nPolish\nIntroduction\n120\nDominik Kozaczko (dominik@kozaczko.info) has volunteered to translate the book to Polish. Translation is in\nprogress and it's main page is available here: Ukąś Pythona.\nUpdate : The translation is complete and ready as of Oct 2, 2009. Thanks to Dominik, his two students and their\nfriend for their time and effort!\nDominik Kozaczko - I'm a Computer Science and Information Technology teacher.\nPortuguese\nArtur Weber (arturweberguimaraes@gmail.com) has completed a translation of this book to Portuguese (as of Feb\n21, 2018) at https://www.homeyou.com/~edu/introducao.\nArtur Weber: My students study at the Polytechnic faculty in Ecological University in the city of Curitiba\n(Brazil) and some of them are interested in different papers.\nAs they are writing course and academic papers, they always look for interesting articles and pages. I also do\nmy best to find interesting materials which can be the sources for their university works.\nI found the materials from your site useful for some of my students who are writing papers based on\nprogramming on Python. Actually, that is why I made a decision to perform a Portuguese translation to let my\nstudents who don't know English read exciting articles in their mother tongue ( in Portuguese).\nRussian\nVladimir Smolyar (v_2e@ukr.net) has completed a Russian translation at http://wombat.org.ua/AByteOfPython/.\nUkranian\nAverkiev Andrey (averkiyev@ukr.net) has volunteered to translate the book to Russian, and perhaps Ukranian (time\npermitting).\nSerbian\n\"BugSpice\" (amortizerka@gmail.com) has completed a Serbian translation:\nThis download link is no longer accessible.\nMore details at http://forum.ubuntu-rs.org/Thread-zagrljaj-pitona.\nSlovak\nAlbertio Ward (albertioward@gmail.com) has translated the book to Slovak at http://www.fatcow.com/edu/python-\nswaroopch-sl/ :\nIntroduction\n121\nWe are a non-profit organization called \"Translation for education\". We represent a group of people, mainly\nstudents and professors, of the Slavonic University. Here are students from different departments: linguistics,\nchemistry, biology, etc. We try to find interesting publications on the Internet that can be relevant for us and\nour university colleagues. Sometimes we find articles by ourselves; other times our professors help us\nchoose the material for translation. After obtaining permission from authors we translate articles and post\nthem in our blog which is available and accessible to our colleagues and friends. These translated\npublications often help students in their daily study routine.\nSpanish\nAlfonso de la Guarda Reyes (alfonsodg@ictechperu.net), Gustavo Echeverria (gustavo.echeverria@gmail.com),\nDavid Crespo Arroyo (davidcrespoarroyo@hotmail.com) and Cristian Bermudez Serna (crisbermud@hotmail.com)\nhave volunteered to translate the book to Spanish.\nGustavo Echeverria says:\nI work as a software engineer in Argentina. I use mostly C# and .Net technologies at work but strictly Python\nor Ruby in my personal projects. I knew Python many years ago and I got stuck inmediately. Not so long after\nknowing Python I discovered this book and it helped me to learn the language. Then I volunteered to\ntranslate the book to Spanish. Now, after receiving some requests, I've begun to translate \"A Byte of Python\"\nwith the help of Maximiliano Soler.\nCristian Bermudez Serna says:\nI am student of Telecommunications engineering at the University of Antioquia (Colombia). Months ago, i\nstarted to learn Python and found this wonderful book, so i volunteered to get the Spanish translation.\nSwedish\nMikael Jacobsson (leochingkwake@gmail.com) has volunteered to translate the book to Swedish.\nTurkish\nTürker SEZER (tsezer@btturk.net) and Bugra Cakir (bugracakir@gmail.com) have volunteered to translate the\nbook to Turkish. \"Where is Turkish version? Bitse de okusak.\"\nIntroduction\n122\nTranslation How-to\n1. The full source of the book is available from https://github.com/swaroopch/byte-of-python.\n2. Please fork the repository.\n3. Then, fetch the repository to your computer. You need to know how to use Git to do that.\n4. Read the Honkit documentation, esp. the Markdown section.\n5. Start editing the  .md  files to translate to your local language.\n6. See INSTALL.md on how to generate the website, PDF, EPUB.\nIntroduction\n123\nFeedback\nThe book needs the help of its readers such as yourselves to point out any parts of the book which are not good,\nnot comprehensible or are simply wrong. Please write to the main author or the respective translators with your\ncomments and suggestions."
]